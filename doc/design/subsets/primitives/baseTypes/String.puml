@startuml

!includesub Object.puml!public_declaration
!includesub ../../shared/iterator/IteratorModel.puml!public_declaration
!includesub ../../shared/iterator/AddressIterator.puml!public_declaration

!startsub private_declaration
!ifndef STRING_PRIVATE
!define STRING_PRIVATE

namespace cds {

    class StringUtils < __CharType > {
        ..utility class..
        + {method} StringUtils () noexcept = delete
        ..public stored fields..
        + {field} {static} lesser : sint8
        + {field} {static} equal : sint8
        + {field} {static} greater : sint8
        + {field} {static} invalidIndex : Index
        ..char util methods..
        + {method} {static} isUpper (__CharType) noexcept -> bool
        + {method} {static} isLower (__CharType) noexcept -> bool
        + {method} {static} isDigit (__CharType) noexcept -> bool
        + {method} {static} isLetter (__CharType) noexcept -> bool
        + {method} {static} isAlpha (__CharType) noexcept -> bool
        + {method} {static} isVowel (__CharType) noexcept -> bool
        + {method} {static} isConsonant (__CharType) noexcept -> bool
        + {method} {static} lower (__CharType) noexcept -> __CharType
        + {method} {static} upper (__CharType) noexcept -> __CharType
        ..char array util methods..
        + {method} {static} compare (__CharType const *, Size, __CharType const *, Size) noexcept -> sint8
        + {method} {static} length (__CharType const *) noexcept -> Size
        + {method} {static} copy (__CharType *, Size, __CharType const *, Size, Size, bool) noexcept -> __CharType *
        ..numeric conversion methods..
        + {method} {static} <__NumericType> integerLength (__NumericType, uint8) noexcept -> uint8
        + {method} {static} <__NumericType> writeInteger (__CharType *, Size, __NumericType, uint8, Size *) noexcept -> uint8
        ..char array search methods..
        + {method} {static} <__CollectionType<...>> find (__CharType const *, Size, __CharType const *, Size, Size, __CollectionType <Index> &) noexcept -> __CollectionType <Index> &
        + {method} {static} findFirst (__CharType const *, Size, __CharType const *, Size) noexcept -> Index
        + {method} {static} findLast (__CharType const *, Size, __CharType const *, Size) noexcept -> Index
        + {method} {static} <__CollectionType<...>> findAll (__CharType const *, Size, __CharType const *, Size, __CollectionType <Index> &) noexcept -> __CollectionType <Index> &
        + {method} {static} findAll (__CharType const *, Size, __CharType const *, Size, Index *, Size) noexcept -> Size
        + {method} {static} contains (__CharType const *, Size, __CharType) noexcept -> bool
        ..approximation functions..
        + {method} {static} <__ArgumentType> stringLengthOfArgument (__ArgumentType &&) noexcept -> Size
    }

    namespace __hidden {
        namespace __impl {
            class __BaseStringView < __CharType > {
                ..fields..
                - {field} _pData : __CharType const *
                - {field} _length : Size
                ..static fields..
                + {field} {static} invalidIndex : Index const
                ..base methods..
                + {method} __BaseStringView () noexcept
                + {method} __BaseStringView (__BaseStringView const &) noexcept
                + {method} __BaseStringView (__BaseStringView &&) noexcept
                + {method} __BaseStringView (__BaseString <__CharType> const &) noexcept
                + {method} __BaseStringView (std::basic_string <__CharType> const &) noexcept
                + {method} __BaseStringView (__CharType const *) noexcept
                + {method} __BaseStringView (__CharType const *, Size) noexcept
                + {method} ~__BaseStringView () noexcept
                ..iterator acquisition methods..
                + {method} begin () const noexcept -> ConstIterator
                + {method} end () const noexcept -> ConstIterator
                + {method} cbegin () const noexcept -> ConstIterator
                + {method} cend () const noexcept -> ConstIterator
                + {method} rbegin () const noexcept -> ConstReverseIterator
                + {method} rend () const noexcept -> ConstReverseIterator
                + {method} crbegin () const noexcept -> ConstReverseIterator
                + {method} crend () const noexcept -> ConstReverseIterator
                ..public methods..
                + {method} length () const noexcept -> Size
                + {method} size () const noexcept -> Size
                + {method} empty () const noexcept -> bool
                + {method} clear () noexcept -> void
                + {method} at (Index) throws OutOfBoundsException -> __CharType
                + {method} get (Index) throws OutOfBoundsException -> __CharType
                + {method} front () throws OutOfBoundsException -> __CharType
                + {method} back () throws OutOfBoundsException -> __CharType
                + {method} hash () const noexcept -> Size
                + {method} toString () const noexcept -> __BaseString <__CharType>
                ..polymorphic methods..
                + {method} toStdString () const noexcept -> std :: basic_string <__CharType>
                + {method} cStr () const noexcept -> __CharType const *
                + {method} data () const noexcept -> __CharType const *
                + {method} operator __CharType const * () const noexcept
                + {method} sequence () const noexcept -> Sequence <__BaseStringView const>
                ..substr methods..
                + {method} substr (Index, Index) const noexcept -> __BaseString < __CharType >
                ..operator overloads..
                + {method} operator [] (Index) throws OutOfBoundsException -> __CharType
                + {method} operator [] (__RangeType const &) throws OutOfBoundsException -> __BaseString<__CharType>
                + {method} operator () (Index, Index) throws OutOfBoundsException -> __BaseString<__CharType>
                + {method} operator = (__BaseString <__CharType> const &) noexcept -> __BaseStringView &
                + {method} operator = (__BaseStringView const &) noexcept -> __BaseStringView &
                + {method} operator = (__BaseStringView &&) noexcept -> __BaseStringView &
                + {method} operator = (std::basic_string <__CharType> const &) noexcept -> __BaseStringView &
                + {method} operator = (__CharType const *) noexcept -> __BaseStringView &
                ..comparison operators and methods..
                + {method} equals (Object const &) const noexcept -> bool

                + {method} operator == (__BaseStringView const &) const noexcept -> bool
                + {method} operator == (std::basic_string <__CharType> const &) const noexcept -> bool
                + {method} operator == (__CharType const *) const noexcept -> bool
                + {method} operator == (__CharType) const noexcept -> bool

                + {method} operator != (__BaseStringView const &) const noexcept -> bool
                + {method} operator != (std::basic_string <__CharType> const &) const noexcept -> bool
                + {method} operator != (__CharType const *) const noexcept -> bool
                + {method} operator != (__CharType) const noexcept -> bool

                + {method} operator < (__BaseStringView const &) const noexcept -> bool
                + {method} operator < (std::basic_string <__CharType> const &) const noexcept -> bool
                + {method} operator < (__CharType const *) const noexcept -> bool
                + {method} operator < (__CharType) const noexcept -> bool

                + {method} operator < (__BaseStringView const &) const noexcept -> bool
                + {method} operator < (std::basic_string <__CharType> const &) const noexcept -> bool
                + {method} operator < (__CharType const *) const noexcept -> bool
                + {method} operator < (__CharType) const noexcept -> bool

                + {method} operator >= (__BaseStringView const &) const noexcept -> bool
                + {method} operator >= (std::basic_string <__CharType> const &) const noexcept -> bool
                + {method} operator >= (__CharType const *) const noexcept -> bool
                + {method} operator >= (__CharType) const noexcept -> bool

                + {method} operator <= (__BaseStringView const &) const noexcept -> bool
                + {method} operator <= (std::basic_string <__CharType> const &) const noexcept -> bool
                + {method} operator <= (__CharType const *) const noexcept -> bool
                + {method} operator <= (__CharType) const noexcept -> bool
                ..composition operator overloads..
                + {method} operator + (__BaseStringView const &) const noexcept -> __BaseString <__CharType>
                + {method} operator + (std::basic_string <__CharType> const &) const noexcept -> __BaseString <__CharType>
                + {method} operator + (__CharType const *) const noexcept -> __BaseString <__CharType>
                + {method} operator + (__CharType) const noexcept -> __BaseString <__CharType>
                + {method} <__NumericType> operator + (__NumericType) const noexcept -> __BaseString <__CharType>
                + {method} <__FloatingPointType> operator + (__FloatingPointType) const noexcept -> __BaseString <__CharType>
                + {method} operator + (bool) const noexcept -> __BaseString <__CharType>

                + {method} operator * (int) const noexcept -> __BaseString <__CharType>
                ..inclusion methods..
                + {method} contains (__CharType) const noexcept -> bool
                + {method} contains (__BaseStringView const &) const noexcept -> bool
                + {method} <__ConvertibleType> contains (__ConvertibleType &&) const noexcept -> bool

                + {method} <__CollectionType<...>> containsAnyOf (__CollectionType <__CharType> const &) const noexcept -> bool
                + {method} <__ConvertibleType> containsAnyOf (__ConvertibleType &&) const noexcept -> bool
                + {method} containsAnyOf (__BaseStringView const &) const noexcept -> bool

                + {method} <__CollectionType<...>> containsAllOf (__CollectionType <__CharType> const &) const noexcept -> bool
                + {method} <__ConvertibleType> containsAllOf (__ConvertibleType &&) const noexcept -> bool
                + {method} containsAllOf (__BaseStringView const &) const noexcept -> bool

                + {method} <__CollectionType<...>> containsAnyNotOf (__CollectionType <__CharType> const &) const noexcept -> bool
                + {method} <__ConvertibleType> containsAnyNotOf (__ConvertibleType &&) const noexcept -> bool
                + {method} containsAnyNotOf (__BaseStringView const &) const noexcept -> bool

                + {method} <__CollectionType<...>> containsAllNotOf (__CollectionType <__CharType> const &) const noexcept -> bool
                + {method} <__ConvertibleType> containsAllNotOf (__ConvertibleType &&) const noexcept -> bool
                + {method} containsAllNotOf (__BaseStringView const &) const noexcept -> bool
                ..find methods..
                + {method} <__CollectionType<...>> find (Size, __CharType, __CollectionType <Index> &) const noexcept -> __CollectionType <Index> &
                + {method} <__CollectionType<...>> find (Size, __CharType) const noexcept -> __CollectionType <Index>
                + {method} findFirst (__CharType) const noexcept -> Index
                + {method} findLast (__CharType) const noexcept -> Index
                + {method} <__CollectionType<...>> findAll (__CharType, __CollectionType <Index> &) const noexcept -> __CollectionType <Index> &
                + {method} <__CollectionType<...>> findAll (__CharType) const noexcept -> __CollectionType <Index>

                + {method} <__CollectionType<...>> find (Size, __BaseStringView const & __CollectionType <Index> &) const noexcept -> __CollectionType <Index> &
                + {method} <__CollectionType<...>> find (Size, __BaseStringView const &) const noexcept -> __CollectionType <Index>
                + {method} findFirst (__BaseStringView const &) const noexcept -> Index
                + {method} findLast (__BaseStringView const &) const noexcept -> Index
                + {method} <__CollectionType<...>> findAll (__BaseStringView const &, __CollectionType <Index> &) const noexcept -> __CollectionType <Index> &
                + {method} <__CollectionType<...>> findAll (__BaseStringView const &) const noexcept -> __CollectionType <Index>

                + {method} <__CollectionType<...>, __ConvertibleType> find (Size, __ConvertibleType &&, __CollectionType <Index> &) const noexcept -> __CollectionType <Index> &
                + {method} <__CollectionType<...>, __ConvertibleType> find (Size, __ConvertibleType &&) const noexcept -> __CollectionType <Index>
                + {method} <__ConvertibleType> findFirst (__ConvertibleType &&) const noexcept -> Index
                + {method} <__ConvertibleType> findLast (__ConvertibleType &&) const noexcept -> Index
                + {method} <__CollectionType<...>, __ConvertibleType> findAll (__ConvertibleType &&, __CollectionType <Index> &) const noexcept -> __CollectionType <Index> &
                + {method} <__CollectionType<...>, __ConvertibleType> findAll (__ConvertibleType &&) const noexcept -> __CollectionType <Index>
                ..findOf methods..
                + {method} <__CollectionType<...>> findOf (Size, __BaseStringView const & __CollectionType <Index> &) const noexcept -> __CollectionType <Index> &
                + {method} <__CollectionType<...>> findOf (Size, __BaseStringView const &) const noexcept -> __CollectionType <Index>
                + {method} findFirstOf (__BaseStringView const &) const noexcept -> Index
                + {method} findLastOf (__BaseStringView const &) const noexcept -> Index
                + {method} <__CollectionType<...>> findAllOf (__BaseStringView const &, __CollectionType <Index> &) const noexcept -> __CollectionType <Index> &
                + {method} <__CollectionType<...>> findAllOf (__BaseStringView const &) const noexcept -> __CollectionType <Index>

                + {method} <__CollectionType<...>, __ConvertibleType> findOf (Size, __ConvertibleType &&, __CollectionType <Index> &) const noexcept -> __CollectionType <Index> &
                + {method} <__CollectionType<...>, __ConvertibleType> findOf (Size, __ConvertibleType &&) const noexcept -> __CollectionType <Index>
                + {method} <__ConvertibleType> findFirstOf (__ConvertibleType &&) const noexcept -> Index
                + {method} <__ConvertibleType> findLastOf (__ConvertibleType &&) const noexcept -> Index
                + {method} <__CollectionType<...>, __ConvertibleType> findAllOf (__ConvertibleType &&, __CollectionType <Index> &) const noexcept -> __CollectionType <Index> &
                + {method} <__CollectionType<...>, __ConvertibleType> findAllOf (__ConvertibleType &&) const noexcept -> __CollectionType <Index>
                ..findNotOf methods..
                + {method} <__CollectionType<...>> findNotOf (Size, __BaseStringView const & __CollectionType <Index> &) const noexcept -> __CollectionType <Index> &
                + {method} <__CollectionType<...>> findNotOf (Size, __BaseStringView const &) const noexcept -> __CollectionType <Index>
                + {method} findFirstNotOf (__BaseStringView const &) const noexcept -> Index
                + {method} findLastNotOf (__BaseStringView const &) const noexcept -> Index
                + {method} <__CollectionType<...>> findAllNotOf (__BaseStringView const &, __CollectionType <Index> &) const noexcept -> __CollectionType <Index> &
                + {method} <__CollectionType<...>> findAllNotOf (__BaseStringView const &) const noexcept -> __CollectionType <Index>

                + {method} <__CollectionType<...>, __ConvertibleType> findNotOf (Size, __ConvertibleType &&, __CollectionType <Index> &) const noexcept -> __CollectionType <Index> &
                + {method} <__CollectionType<...>, __ConvertibleType> findNotOf (Size, __ConvertibleType &&) const noexcept -> __CollectionType <Index>
                + {method} <__ConvertibleType> findFirstNotOf (__ConvertibleType &&) const noexcept -> Index
                + {method} <__ConvertibleType> findLastNotOf (__ConvertibleType &&) const noexcept -> Index
                + {method} <__CollectionType<...>, __ConvertibleType> findAllNotOf (__ConvertibleType &&, __CollectionType <Index> &) const noexcept -> __CollectionType <Index> &
                + {method} <__CollectionType<...>, __ConvertibleType> findAllNotOf (__ConvertibleType &&) const noexcept -> __CollectionType <Index>
                ..split methods..
                + {method} <__CollectionType> split (__CharType, __CollectionType &, Size) const noexcept -> __CollectionType &
                + {method} <__CollectionType<...>> split (__CharType, Size) const noexcept -> __CollectionType <__BaseString <__CharType>>

                + {method} <__CollectionType> split (__BaseStringView const &, __CollectionType &, Size) const noexcept -> __CollectionType &
                + {method} <__CollectionType<...>> split (__BaseStringView const &, Size) const noexcept -> __CollectionType <__BaseString <__CharType>>

                + {method} <__CollectionType, __ConvertibleType> split (__ConvertibleType &&, __CollectionType &, Size) const noexcept -> __CollectionType &
                + {method} <__CollectionType<...>, __ConvertibleType> split (__ConvertibleType &&, Size) const noexcept -> __CollectionType <__BaseString <__CharType>>

                + {method} <__CollectionType> splitByString (__BaseStringView const &, __CollectionType &, Size) const noexcept -> __CollectionType &
                + {method} <__CollectionType<...>> splitByString (__BaseStringView const &, Size) const noexcept -> __CollectionType <__BaseString <__CharType>>

                + {method} <__CollectionType, __ConvertibleType> splitByString (__ConvertibleType &&, __CollectionType &, Size) const noexcept -> __CollectionType &
                + {method} <__CollectionType<...>, __ConvertibleType> splitByString (__ConvertibleType &&, Size) const noexcept -> __CollectionType <__BaseString <__CharType>>
                ..specialized find methods..
                + {method} startsWith (__CharType) const noexcept -> bool
                + {method} startsWith (__BaseStringView const &) const noexcept -> bool
                + {method} <__ConvertibleType> startsWith (__ConvertibleType &&) const noexcept -> bool

                + {method} endsWith (__CharType) const noexcept -> bool
                + {method} endsWith (__BaseStringView const &) const noexcept -> bool
                + {method} <__ConvertibleType> endsWith (__ConvertibleType &&) const noexcept -> bool
                ..functional methods..
                + {method} <__Action> forEach (__Action const &) const throws if __Action throws -> void
                + {method} <__Predicate> some (Size, __Predicate const &) const throws if __Predicate throws -> bool
                + {method} <__Predicate> atLeast (Size, __Predicate const &) const throws if __Predicate throws -> bool
                + {method} <__Predicate> atMost (Size, __Predicate const &) const throws if __Predicate throws -> bool
                + {method} <__Predicate> moreThan (Size, __Predicate const &) const throws if __Predicate throws -> bool
                + {method} <__Predicate> fewerThan (Size, __Predicate const &) const throws if __Predicate throws -> bool
                + {method} <__Predicate> count (__Predicate const &) const throws if __Predicate throws -> Size
                + {method} <__Predicate> any (__Predicate const &) const throws if __Predicate throws -> bool
                + {method} <__Predicate> all (__Predicate const &) const throws if __Predicate throws -> bool
                + {method} <__Predicate> none (__Predicate const &) const throws if __Predicate throws -> bool
            }

            class "__BaseStringView::ConstIterator" << (T, #aa9999) >> {

            }

            class "__BaseStringView::ConstReverseIterator" << (T, #aa9999) >> {

            }

            class __BaseString {

            }

            cds.Object <|-- __BaseString

            __BaseString .. "is" cds.String
            __BaseString .. "is" cds.WideString

            __BaseStringView .. "is" cds.StringView
            __BaseStringView .. "is" cds.WideStringView

            cds.ForwardAddressIterator .. "is" "__BaseStringView::ConstIterator"
            cds.BackwardAddressIterator .. "is" "__BaseStringView::ConstReverseIterator"

            "__BaseStringView::ConstIterator" "nested in" ... __BaseStringView
            "__BaseStringView::ConstReverseIterator" "nested in" ... __BaseStringView

            __BaseStringView ... "used by" cds.StringUtils
            __BaseString ... "used by" cds.StringUtils
        }

    }
}

!endif
!endsub

!startsub public_declaration
!ifndef STRING_PUBLIC
!define STRING_PUBLIC

namespace cds {

    class String << (T, #aa9999) >>
    class WideString << (T, #aa9999) >>
    class StringView << (T, #aa9999) >>
    class WideStringView << (T, #aa9999) >>

}

!endif
!endsub

@enduml