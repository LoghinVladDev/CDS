@startuml

!includesub IteratorModel.puml!public_declaration

!startsub public_declaration
!ifndef ITERATOR_GENERIC_DECORATOR_PUBLIC
!define ITERATOR_GENERIC_DECORATOR_PUBLIC

namespace cds {

    class ForwardIteratorGenericDecorator <FWIT, E, Function<FWIT, E>> implements cds.meta.ForwardIterator {
        - {field} _iterator : FWIT
        ..base functions..
        + {method} ForwardIteratorGenericDecorator () noexcept
        + {method} ForwardIteratorGenericDecorator (FWIT const &) noexcept
        + {method} ForwardIteratorGenericDecorator (FWIT &&) noexcept
        + {method} ForwardIteratorGenericDecorator (ForwardIteratorGenericDecorator const &) noexcept
        + {method} ForwardIteratorGenericDecorator (ForwardIteratorGenericDecorator &&) noexcept
        + {method} ~ForwardIteratorGenericDecorator () noexcept
        + {method} operator = (ForwardIteratorGenericDecorator const &) noexcept -> ForwardIteratorGenericDecorator &
        + {method} operator = (ForwardIteratorGenericDecorator &&) noexcept -> ForwardIteratorGenericDecorator &
        ..public methods..
        + {method} operator * () const noexcept -> E &
        + {method} operator -> () const noexcept -> E *
        + {method} operator == (ForwardIteratorGenericDecorator const &) const noexcept -> bool
        + {method} operator != (ForwardIteratorGenericDecorator const &) const noexcept -> bool
        + {method} operator ++ () noexcept -> ForwardIteratorGenericDecorator &
        + {method} operator ++ (int) noexcept -> ForwardIteratorGenericDecorator
        + {method} operator bool () const noexcept
        + {method} iterator () const noexcept -> ForwardIteratorGenericDecorator const &
        + {method} iterator () noexcept -> ForwardIteratorGenericDecorator &
    }

}

!endif
!endsub

@enduml