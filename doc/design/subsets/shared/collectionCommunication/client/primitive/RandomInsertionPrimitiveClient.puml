@startuml

!includesub ../../channel/Channel.puml!public_declaration

!startsub public_declaration
!ifndef RANDOM_INSERTION_PUBLIC
!define RANDOM_INSERTION_PUBLIC

namespace cds {
    namespace __hidden {
        namespace __impl {

            interface __RandomInsertionPrimitiveClient <R, E, RV> {
                + {method} insert (E const &) throws except(E(E const &)) -> RV &
                + {method} insert (E &&) throws except(E(E &&)) -> RV &
                + {method} <__Args ...> emplace (__Args && ...) throws except(E(__Args && ...)) -> RV &
                + {method} <__Args ...> insertAll (__Args && ...) throws except(E(AnyTypeOf(__Args ...))) -> void
                + {method} <__Iterable> insertAllOf (__Iterable const &) throws except(E(ReturnOf(__Iterable::begin()) const &)) -> void
                + {method} insertAllOf (std::initializer_list <E>) throws except(E(E const &)) -> void
                + {method} <__Iterator> insertAllOf (__Iterator const &, __Iterator const &, [Size]) throws except(E(ReturnOf(__Iterator::operator *()) const &)) -> void
                + {method} <strike>add</strike> (E const &) throws except(E(E const &)) -> RV &
                + {method} <strike>add</strike> (E &&) throws except(E(E &&)) -> RV &
                + {method} <__Args ...> <strike>addAll</strike> (__Args && ...) throws except(E(AnyTypeOf(__Args ...))) -> void
                + {method} <__Iterable> <strike>addAllOf</strike> (__Iterable const &) throws except(E(ReturnOf(__Iterable::begin()) const &)) -> void
                + {method} <strike>addAllOf</strike> (std::initializer_list <E>) throws except(E(E const &)) -> void
                + {method} <__Iterator> <strike>addAllOf</strike> (__Iterator const &, __Iterator const &, [Size]) throws except(E(ReturnOf(__Iterator::operator *()) const &)) -> void
            }

            interface __LocalRandomInsertionPrimitiveClient <R, E, RV> {
                + {method} insert (E const &) throws except(E(E const &)) -> RV &
                + {method} insert (E &&) throws except(E(E &&)) -> RV &
                + {method} <__Args ...> emplace (__Args && ...) throws except(E(__Args && ...)) -> RV &
                + {method} <__Args ...> insertAll (__Args && ...) throws except(E(AnyTypeOf(__Args ...))) -> void
                + {method} <__Iterable> insertAllOf (__Iterable const &) throws except(E(ReturnOf(__Iterable::begin()) const &)) -> void
                + {method} insertAllOf (std::initializer_list <E>) throws except(E(E const &)) -> void
                + {method} <__Iterator> insertAllOf (__Iterator const &, __Iterator const &, [Size]) throws except(E(ReturnOf(__Iterator::operator *()) const &)) -> void
                + {method} <strike>add</strike> (E const &) throws except(E(E const &)) -> RV &
                + {method} <strike>add</strike> (E &&) throws except(E(E &&)) -> RV &
                + {method} <__Args ...> <strike>addAll</strike> (__Args && ...) throws except(E(AnyTypeOf(__Args ...))) -> void
                + {method} <__Iterable> <strike>addAllOf</strike> (__Iterable const &) throws except(E(ReturnOf(__Iterable::begin()) const &)) -> void
                + {method} <strike>addAllOf</strike> (std::initializer_list <E>) throws except(E(E const &)) -> void
                + {method} <__Iterator> <strike>addAllOf</strike> (__Iterator const &, __Iterator const &, [Size]) throws except(E(ReturnOf(__Iterator::operator *()) const &)) -> void
            }

            note "Requests direct dispatcher-standard calls" as RIPCLocalHint
            note "Requests handlers to call through Channel" as RIPCHint
            RIPCLocalHint - __LocalRandomInsertionPrimitiveClient
            RIPCHint - __RandomInsertionPrimitiveClient

        }
    }
}

!endif
!endsub

@enduml