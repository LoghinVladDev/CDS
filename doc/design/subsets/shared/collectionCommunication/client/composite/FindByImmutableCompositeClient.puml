@startuml

!includesub ../primitive/DelegateForwardConstIterablePrimitiveClient.puml!public_declaration

!startsub public_declaration
!ifndef FIND_BY_CONST_PUBLIC
!define FIND_BY_CONST_PUBLIC

namespace cds {

    namespace __hidden {
        namespace __impl {

            interface __DelegateForwardConstIterablePrimitiveClient
            interface __LocalDelegateForwardConstIterablePrimitiveClient

            interface __FindByImmutableCompositeClient <R, E, CIT> {
                + {method} <C <...>, P> findThat (Size, C <CIT> &, P const &) const throws(except(P::operator()(E const &)) -> C<CIT> &
                + {method} <C <...>, P> findThat (Size, P const &) const throws(except(P::operator()(E const &)) -> C<CIT>
                + {method} <P> findFirstThat (P const &) const throws(except(P::operator()(E const &)) -> CIT
                + {method} <P> findLastThat (P const &) const throws(except(P::operator()(E const &)) -> CIT
                + {method} <C <...>, P> findAllThat (C <CIT> &, P const &) const throws(except(P::operator()(E const &)) -> C<CIT> &
                + {method} <C <...>, P> findAllThat (P const &) const throws(except(P::operator()(E const &)) -> C<CIT>
            }

            class __LocalFindByImmutableCompositeClient <R, E, CIT> << (T, #aa9999) >>
            __FindByImmutableCompositeClient .. "is " __LocalFindByImmutableCompositeClient
            __DelegateForwardConstIterablePrimitiveClient .. "uses" __FindByImmutableCompositeClient
            __LocalDelegateForwardConstIterablePrimitiveClient ... "uses" __LocalFindByImmutableCompositeClient

        }
    }
}

!endif
!endsub

@enduml