@startuml

!includesub ../primitive/DelegateForwardConstIterablePrimitiveClient.puml!public_declaration

!startsub public_declaration
!ifndef FIND_OF_CONST_PUBLIC
!define FIND_OF_CONST_PUBLIC

namespace cds {

    namespace __hidden {
        namespace __impl {

            interface __DelegateForwardConstIterablePrimitiveClient
            interface __LocalDelegateForwardConstIterablePrimitiveClient

            interface __FindOfImmutableCompositeClient <R, E, CIT, I, BiPredicate <I, E>, BiPredicate <I, E>> {
                + {method} <C<...>> findOf (Size, C <CIT> &, I const &) const noexcept -> C <CIT> &
                + {method} <C<...>> findOf (Size, I const &) const noexcept -> C <CIT>
                + {method} findFirstOf (I const &) const noexcept -> CIT
                + {method} findLastFirstOf (I const &) const noexcept -> CIT
                + {method} <C<...>> findAllOf (C <CIT> &, I const &) const noexcept -> C <CIT> &
                + {method} <C<...>> findAllOf (I const &) const noexcept -> C <CIT>

                + {method} <C<...>> findNotOf (Size, C <CIT> &, I const &) const noexcept -> C <CIT> &
                + {method} <C<...>> findNotOf (Size, I const &) const noexcept -> C <CIT>
                + {method} findFirstNotOf (I const &) const noexcept -> CIT
                + {method} findLastFirstNotOf (I const &) const noexcept -> CIT
                + {method} <C<...>> findAllNotOf (C <CIT> &, I const &) const noexcept -> C <CIT> &
                + {method} <C<...>> findAllNotOf (I const &) const noexcept -> C <CIT>
            }

            class __LocalFindOfImmutableCompositeClient <R, E, CIT, I, BiPredicate <I, E>, BiPredicate <I, E>> << (T, #aa9999) >>
            __FindOfImmutableCompositeClient .. "is " __LocalFindOfImmutableCompositeClient
            __DelegateForwardConstIterablePrimitiveClient .. "uses" __FindOfImmutableCompositeClient
            __LocalDelegateForwardConstIterablePrimitiveClient ... "uses" __LocalFindOfImmutableCompositeClient

        }
    }
}

!endif
!endsub

@enduml