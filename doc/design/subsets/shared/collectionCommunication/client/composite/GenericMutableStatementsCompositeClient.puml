@startuml

!includesub ../primitive/DelegateForwardIterablePrimitiveClient.puml!public_declaration

!startsub public_declaration
!ifndef GENERIC_STMT_PUBLIC
!define GENERIC_STMT_PUBLIC

namespace cds {

    namespace __hidden {
        namespace __impl {

            interface __DelegateForwardIterablePrimitiveClient
            interface __LocalDelegateForwardIterablePrimitiveClient

            interface __GenericMutableStatementsCompositeClient <R, E> {
                + {method} <A> forEach (A const &) throws(except(A::operator()(E &))) -> void
                + {method} <P> some (Size, [P const &]) throws(except(P::operator()(E &))) -> bool
                + {method} <P> atLeast (Size, [P const &]) throws(except(P::operator()(E &))) -> bool
                + {method} <P> atMost (Size, [P const &]) throws(except(P::operator()(E &))) -> bool
                + {method} <P> moreThan (Size, [P const &]) throws(except(P::operator()(E &))) -> bool
                + {method} <P> fewerThan (Size, [P const &]) throws(except(P::operator()(E &))) -> bool
                + {method} <P> count ([P const &]) throws(except(P::operator()(E &))) -> Size
                + {method} <P> any ([P const &]) throws(except(P::operator()(E &))) -> bool
                + {method} <P> all ([P const &]) throws(except(P::operator()(E &))) -> bool
                + {method} <P> none ([P const &]) throws(except(P::operator()(E &))) -> bool
            }

            class __LocalGenericMutableStatementsCompositeClient <R, E> << (T, #aa9999) >>
            __GenericMutableStatementsCompositeClient .. "is " __LocalGenericMutableStatementsCompositeClient
            __DelegateForwardIterablePrimitiveClient .. "uses" __GenericMutableStatementsCompositeClient
            __LocalDelegateForwardIterablePrimitiveClient ... "uses" __LocalGenericMutableStatementsCompositeClient

        }
    }
}

!endif
!endsub

@enduml