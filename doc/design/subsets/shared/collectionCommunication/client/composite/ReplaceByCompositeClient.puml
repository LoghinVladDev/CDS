@startuml

!includesub ../primitive/DelegateForwardIterablePrimitiveClient.puml!public_declaration

!startsub public_declaration
!ifndef REPLACE_BY_PUBLIC
!define REPLACE_BY_PUBLIC

namespace cds {

    namespace __hidden {
        namespace __impl {

            interface __DelegateForwardIterablePrimitiveClient
            interface __LocalDelegateForwardIterablePrimitiveClient

            interface __ReplaceByCompositeClient <R, E> {
                + {method} <P> replaceThat (Size, P const &, E const &) throws(except(P::operator()(E &))) -> Size
                + {method} <P> replaceFirstThat (P const &, E const &) throws(except(P::operator()(E &))) -> bool
                + {method} <P> replaceFirstThat (P const &, E &&) throws(except(P::operator()(E &))) -> bool
                + {method} <P> replaceLastThat (P const &, E const &) throws(except(P::operator()(E &))) -> bool
                + {method} <P> replaceLastThat (P const &, E &&) throws(except(P::operator()(E &))) -> bool
                + {method} <P> replaceAllThat (P const &, E const &) throws(except(P::operator()(E &))) -> Size

                + {method} <P, S> replaceThatBy (Size, P const &, S const &) throws(except(P::operator()(E &)), except(S::operator()(E &))) -> Size
                + {method} <P, S> replaceFirstThatBy (P const &, S const &) throws(except(P::operator()(E &)), except(S::operator()(E &))) -> bool
                + {method} <P, S> replaceLastThatBy (P const &, S const &) throws(except(P::operator()(E &)), except(S::operator()(E &))) -> bool
                + {method} <P, S> replaceAllThatBy (P const &, S const &) throws(except(P::operator()(E &)), except(S::operator()(E &))) -> Size
            }

            class __LocalReplaceByCompositeClient <R, E> << (T, #aa9999) >>
            __ReplaceByCompositeClient .. "is " __LocalReplaceByCompositeClient
            __DelegateForwardIterablePrimitiveClient .. "uses" __ReplaceByCompositeClient
            __LocalDelegateForwardIterablePrimitiveClient ... "uses" __LocalReplaceByCompositeClient

        }
    }
}

!endif
!endsub

@enduml