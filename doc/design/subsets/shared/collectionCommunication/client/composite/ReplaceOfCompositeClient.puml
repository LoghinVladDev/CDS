@startuml

!includesub ../primitive/DelegateForwardIterablePrimitiveClient.puml!public_declaration

!startsub public_declaration
!ifndef REPLACE_OF_PUBLIC
!define REPLACE_OF_PUBLIC

namespace cds {

    namespace __hidden {
        namespace __impl {

            interface __DelegateForwardIterablePrimitiveClient
            interface __LocalDelegateForwardIterablePrimitiveClient

            interface __ReplaceOfCompositeClient <R, E, I, BiPredicate <I, E>> {
                + {method} replaceOf (Size, I const &, E const &) noexcept -> Size
                + {method} replaceFirstOf (I const &, E const &) noexcept -> bool
                + {method} replaceFirstOf (I const &, E &&) noexcept -> bool
                + {method} replaceLastOf (I const &, E const &) noexcept -> bool
                + {method} replaceLastOf (I const &, E &&) noexcept -> bool
                + {method} replaceAllOf (I const &, E const &) noexcept -> Size

                + {method} replaceNotOf (Size, I const &, E const &) noexcept -> Size
                + {method} replaceFirstNotOf (I const &, E const &) noexcept -> bool
                + {method} replaceFirstNotOf (I const &, E &&) noexcept -> bool
                + {method} replaceLastNotOf (I const &, E const &) noexcept -> bool
                + {method} replaceLastNotOf (I const &, E &&) noexcept -> bool
                + {method} replaceAllNotOf (I const &, E const &) noexcept -> Size
            }

            class __LocalReplaceOfCompositeClient <R, E, I, BiPredicate <I, E>> << (T, #aa9999) >>
            __ReplaceOfCompositeClient .. "is " __LocalReplaceOfCompositeClient
            __DelegateForwardIterablePrimitiveClient .. "uses" __ReplaceOfCompositeClient
            __LocalDelegateForwardIterablePrimitiveClient ... "uses" __LocalReplaceOfCompositeClient

        }
    }
}

!endif
!endsub

@enduml