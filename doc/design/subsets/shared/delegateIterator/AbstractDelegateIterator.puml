@startuml

!includesub IteratorAdvanceDirection.puml!public_declaration

!startsub public_declaration
!ifndef ABS_DEL_IT_PUBLIC
!define ABS_DEL_IT_PUBLIC

namespace cds {

    namespace __hidden {
        namespace __impl {

            abstract class __AbstractDelegateIterator <E> {
                ..base methods..
                # {method} __AbstractDelegateIterator () noexcept
                # {method} __AbstractDelegateIterator (__AbstractDelegateIterator const &) noexcept
                # {method} __AbstractDelegateIterator (__AbstractDelegateIterator &&) noexcept
                + {method} {abstract} ~__AbstractDelegateIterator (__AbstractDelegateIterator &&) noexcept
                # {method} operator = (__AbstractDelegateIterator const &) noexcept -> __AbstractDelegateIterator &
                # {method} operator = (__AbstractDelegateIterator &&) noexcept -> __AbstractDelegateIterator &
                ..public methods..
                + {method} {abstract} advance (__IteratorAdvanceDirection) noexcept -> void
                + {method} {abstract} equals (__AbstractDelegateIterator const &) const noexcept -> bool
                + {method} {abstract} valid () const noexcept -> bool
                + {method} {abstract} iterator () const noexcept -> cds::meta::Iterator const *
                + {method} {abstract} copy () const noexcept -> __AbstractDelegateIterator *
                + {method} {abstract} value () const noexcept -> E &
            }

        }
    }
}

!endif
!endsub

@enduml