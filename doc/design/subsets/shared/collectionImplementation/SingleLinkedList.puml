@startuml

!includesub ../iterator/NodeIterator.puml!public_declaration
!includesub ../iterator/NodeModel.puml!public_declaration

!startsub public_declaration
!ifndef SLL_BASE_PUBLIC
!define SLL_BASE_PUBLIC

namespace cds {

    namespace __hidden {
        namespace __impl {

            class __SingleLinkedList <E, BiPredicate <E, E>> {
                - {field} _pFront : __NodeType *
                - {field} _pBack : __NodeType *
                ..base methods..
                # {method} __SingleLinkedList () noexcept
                # {method} __SingleLinkedList (__SingleLinkedList const &) noexcept
                # {method} __SingleLinkedList (__SingleLinkedList &&) noexcept
                - {method} {static} __sll_allocateNode () noexcept -> __NodeType *
                - {method} {static} __sll_freeNode (__NodeType *) noexcept -> void
                ..general methods..
                # {method} __sll_clear () noexcept -> void
                # {method} __sll_empty () const noexcept -> bool
                # {method} __sll_front () const noexcept -> E const *
                # {method} __sll_front () noexcept -> E *
                # {method} __sll_removeFront () noexcept -> void
                # {method} __sll_newFront () noexcept -> E *
                # {method} __sll_newBack () noexcept -> E *
                # {method} __sll_removeNode (__NodeType *, __NodeType *) noexcept -> void
                # {method} __sll_remove (E const &) noexcept -> void
                # {method} __sll_removeIteratorRage (__sll_Iterator const *, __sll_Iterator const *) noexcept -> Size
                # {method} __sll_removeConstIteratorRage (__sll_ConstIterator const *, __sll_ConstIterator const *) noexcept -> Size
                # {method} __sll_copy (__SingleLinkedList const &) noexcept -> void
                # {method} __sll_move (__SingleLinkedList &&) noexcept -> void
                # {method} __sll_copyCleared (__SingleLinkedList const &) noexcept -> void
                # {method} __sll_moveCleared (__SingleLinkedList &&) noexcept -> void
                # {method} __sll_equals (__SingleLinkedList const &) const noexcept -> bool
                ..dispatcher required methods, in order..
                # {method} __sll_begin () noexcept -> __sll_Iterator
                # {method} __sll_end () noexcept -> __sll_Iterator
                # {method} __sll_cbegin () const noexcept -> __sll_ConstIterator
                # {method} __sll_cend () const noexcept -> __sll_ConstIterator
                # {method} __sll_new (E const *, bool *) noexcept -> E *
                # {method} __sll_removeIterator (__sll_Iterator const &) noexcept -> bool
                # {method} __sll_removeConstIterator (__sll_ConstIterator const &) noexcept -> bool
                # {method} __sll_removeIteratorArray (__sll_Iterator const * const *, Size) noexcept -> Size
                # {method} __sll_removeConstIteratorArray (__sll_ConstIterator const * const *, Size) noexcept -> Size
            }

            class __SingleLinkedList::__sll_Iterator << (T, #aa9999) >>
            class __SingleLinkedList::__sll_ConstIterator << (T, #aa9999) >>
            class __SingleLinkedList::__NodeType << (T, #aa9999) >>

            __SingleLinkedList::__sll_Iterator "is nested in" .. __SingleLinkedList
            __SingleLinkedList::__sll_ConstIterator "is nested in" .. __SingleLinkedList
            __SingleLinkedList::__NodeType "is nested in" .. __SingleLinkedList

            cds.UnidirectionalNodeIterator ... "is" __SingleLinkedList::__sll_Iterator
            cds.UnidirectionalNodeConstIterator ... "is" __SingleLinkedList::__sll_ConstIterator
            cds.__hidden.__impl.__UnidirectionalNode .. "is" __SingleLinkedList::__NodeType

        }
    }

}

!endif
!endsub

!startsub private
remove cds.*Bi*
remove cds.__hidden.__impl.__Bi*
remove cds.__hidden.__impl.__Red*
!endsub

@enduml