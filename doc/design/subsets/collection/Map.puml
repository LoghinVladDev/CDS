@startuml

!includesub MutableCollection.puml!public_declaration
!includesub Set.puml!public_declaration

!includesub ../shared/collectionCommunication/client/primitive/FindUniqueMutablePrimitiveClient.puml!public_declaration
!includesub ../shared/collectionCommunication/client/primitive/FindUniqueImmutablePrimitiveClient.puml!public_declaration

!startsub public_declaration
!ifndef MAP_PUBLIC
!define MAP_PUBLIC

namespace cds {

    namespace __hidden {
        namespace __impl {

            interface __FindUniqueImmutablePrimitiveClient
            interface __FindUniqueMutablePrimitiveClient

            class __MapFindUniqueImmutableClient <E> << (T, #aa9999) >>
            class __MapFindUniqueMutableClient <E> << (T, #aa9999) >>

            __FindUniqueMutablePrimitiveClient ......... "is" __MapFindUniqueMutableClient
            __FindUniqueImmutablePrimitiveClient ......... "is" __MapFindUniqueImmutableClient

            class __MapEntry <K, V> {
                - {field} _key : K
                - {field} _value : V
                ..base methods..
                + {method} __MapEntry () noexcept
                + {method} __MapEntry (__MapEntry const &) noexcept
                + {method} __MapEntry (__MapEntry &&) noexcept
                + {method} __MapEntry (__MapEntry <meta::Decay<K>, V> const &) noexcept
                + {method} __MapEntry (__MapEntry <meta::Decay<K>, V> &&) noexcept
                + {method} __MapEntry (Pair <K, V> const &) noexcept
                + {method} __MapEntry (Pair <K, V> &&) noexcept
                + {method} operator = (__MapEntry const &) noexcept -> __MapEntry &
                + {method} operator = (__MapEntry &&) noexcept -> __MapEntry &
                + {method} ~__MapEntry () noexcept
                ..public methods..
                + {method} operator == (__MapEntry const &) const noexcept -> bool
                + {method} operator != (__MapEntry const &) const noexcept -> bool
                + {method} hash () const noexcept -> Size
                + {method} toString () const noexcept -> String
                + {method} operator String () const noexcept
                + {method} {static} operator << (std::ostream &, __MapEntry const &) noexcept -> std::ostream &

                + {method} key () const noexcept -> K const &
                + {method} value () const noexcept -> V const &
                + {method} value () noexcept -> V &
                + {method} <strike> first </strike> () const noexcept -> K const &
                + {method} <strike> second </strike> () const noexcept -> V const &
                + {method} <strike> second </strike> () noexcept -> V &
                + {method} <strike> getKey </strike> () const noexcept -> K const &
                + {method} <strike> getValue </strike> () const noexcept -> V const &
                + {method} <strike> getValue </strike> () noexcept -> V &
            }

        }
    }

    abstract class MutableCollection<E>
    abstract class Set<E>
    abstract class Map <K, V> extends MutableCollection implements cds.__hidden.__impl.__MapFindUniqueImmutableClient, cds.__hidden.__impl.__MapFindUniqueMutableClient {
        ..base methods..
        # {method} Map () noexcept
        # {method} Map (Map const &) noexcept
        # {method} Map (Map &&) noexcept
        + {method} {abstract} ~Map () noexcept
        ..public methods..
        + {method} {abstract} keys () const noexcept -> Set <K const> const &
        + {method} {abstract} keys () noexcept -> Set <K const> &
        + {method} {abstract} values () const noexcept -> MutableCollection <V> const &
        + {method} {abstract} values () noexcept -> MutableCollection <V> &
        + {method} {abstract} entries () const noexcept -> MutableCollection <MapEntry<K, V>> const &
        + {method} {abstract} entries () noexcept -> MutableCollection <MapEntry<K, V>> &

        + {method} toString () const noexcept -> String
        + {method} contains (MapEntry <K, V> const &) const noexcept -> bool
        + {method} {abstract} containsKey (K const &) const noexcept -> bool
        + {method} {abstract} containsValue (K const &) const noexcept -> bool
        + {method} {abstract} remove (K const &) noexcept -> bool

        + {method} <TK, [TV]> get (TK &&) noexcept -> V &
        + {method} at (K const &) throws KeyException -> V &
        + {method} at (K const &) const throws KeyException -> V const &
        + {method} <TK, [TV]> operator [] (TK &&) noexcept -> V &
        + {method} operator [] (K const &) const throws KeyException -> V const &
        ..protected methods..
        # {method} {abstract} entryAt (K const &, bool *) noexcept -> MapEntry <K, V> *
        # {method} {abstract} entryAt (K const &) const noexcept -> MapEntry <K, V> const *
    }

    class MapEntry <K, V> << (T, #aa9999) >>
    cds.__hidden.__impl.__MapEntry ............. "is" MapEntry
    MapEntry "is used by" .. Map

    abstract class Map::AbstractMapProxy {
        - {field} _pMap : Map *
        # {method} AbstractMapProxy (Map *) noexcept
        # {method} AbstractMapProxy (AbstractMapProxy const &) noexcept
        # {method} AbstractMapProxy (AbstractMapProxy &&) noexcept
        + {method} ~AbstractMapProxy () noexcept
        + {method} <[D=Map]> map() noexcept -> D *
        + {method} <[D=Map]> map() const noexcept -> D const *
    }

    abstract class Map::AbstractValueMutableCollectionProxy extends Map::AbstractMapProxy, MutableCollection {
        # {method} AbstractValueMutableCollectionProxy (Map *) noexcept
        # {method} AbstractValueMutableCollectionProxy (AbstractValueMutableCollectionProxy const &) noexcept
        # {method} AbstractValueMutableCollectionProxy (AbstractValueMutableCollectionProxy &&) noexcept
        + {method} {abstract} ~AbstractValueMutableCollectionProxy () noexcept
        + {method} clear () noexcept -> void
        + {method} size () const noexcept -> Size
        + {method} toString () const noexcept -> String
        ..method required by dispatcher, always throws error..
        # {method} __newAddress (V const *, bool *) throws UnsupportedOperationException -> V *
    }

    abstract class Map::AbstractEntryMutableCollectionProxy extends Map::AbstractMapProxy, MutableCollection {
        # {method} AbstractEntryMutableCollectionProxy (Map *) noexcept
        # {method} AbstractEntryMutableCollectionProxy (AbstractEntryMutableCollectionProxy const &) noexcept
        # {method} AbstractEntryMutableCollectionProxy (AbstractEntryMutableCollectionProxy &&) noexcept
        + {method} {abstract} ~AbstractEntryMutableCollectionProxy () noexcept
        + {method} clear () noexcept -> void
        + {method} size () const noexcept -> Size
        + {method} toString () const noexcept -> String
    }

    abstract class Map::AbstractKeySetProxy extends Map::AbstractMapProxy, Set {
        # {method} AbstractKeySetProxy (Map *) noexcept
        # {method} AbstractKeySetProxy (AbstractKeySetProxy const &) noexcept
        # {method} AbstractKeySetProxy (AbstractKeySetProxy &&) noexcept
        + {method} {abstract} ~AbstractKeySetProxy () noexcept
        + {method} clear () noexcept -> void
        + {method} remove (K const &) noexcept -> bool
        + {method} size () const noexcept -> Size
        ..method required by dispatcher, always throws error..
        # {method} __newAddress (K const *, bool *) throws UnsupportedOperationException -> K *
    }

    Map . "nested in" Map::AbstractMapProxy
    Map .. "nested in" Map::AbstractValueMutableCollectionProxy
    Map .. "nested in" Map::AbstractEntryMutableCollectionProxy
    Map .. "nested in" Map::AbstractKeySetProxy

}

!endif
!endsub

!startsub private
remove cds.__hidden.__impl.__*Local*
remove *LocalHint*
!endsub

@enduml