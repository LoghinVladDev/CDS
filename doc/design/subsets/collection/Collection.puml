@startuml

!includesub ../shared/collectionCommunication/channel/Channel.puml!public_declaration

!includesub ../shared/collectionCommunication/client/primitive/DelegateForwardConstIterablePrimitiveClient.puml!public_declaration
!includesub ../shared/collectionCommunication/client/primitive/ConstIteratorRemovePrimitiveClient.puml!public_declaration
!includesub ../shared/collectionCommunication/client/primitive/RandomInsertionPrimitiveClient.puml!public_declaration

!includesub ../shared/collectionCommunication/client/composite/ContainsOfCompositeClient.puml!public_declaration
!includesub ../shared/collectionCommunication/client/composite/FindOfImmutableCompositeClient.puml!public_declaration
!includesub ../shared/collectionCommunication/client/composite/FindByImmutableCompositeClient.puml!public_declaration
!includesub ../shared/collectionCommunication/client/composite/RemoveOfCompositeClient.puml!public_declaration
!includesub ../shared/collectionCommunication/client/composite/RemoveByCompositeClient.puml!public_declaration
!includesub ../shared/collectionCommunication/client/composite/GenericImmutableStatementsCompositeClient.puml!public_declaration

!startsub public_declaration
!ifndef COLLECTION_PUBLIC
!define COLLECTION_PUBLIC

namespace cds {

    namespace __hidden {
        namespace __impl {

            interface __CollectionInternalCommunicationChannel
            interface __DelegateForwardConstIterablePrimitiveClient
            interface __AbstractConstIteratorRemovePrimitiveClient
            interface __RandomInsertionPrimitiveClient
            interface __ContainsOfCompositeClient
            interface __ContainsOfCompositeClient
            interface __FindOfImmutableCompositeClient
            interface __FindOfImmutableCompositeClient
            interface __FindByImmutableCompositeClient
            interface __RemoveOfCompositeClient
            interface __RemoveOfCompositeClient
            interface __RemoveByCompositeClient
            interface __GenericImmutableStatementsCompositeClient

            interface __CollectionFunctions <E, BiPredicate <E, E>> {
                # {method} {static} __cf_equals (E const &, E const &) const noexcept -> bool
            }

            class __CollectionCommunicationChannel <E> << (T, #aa9999) >>
            class __CollectionDelegateForwardConstIterableClient <E> << (T, #aa9999) >>
            class __CollectionConstIteratorRemoveClient <E> << (T, #aa9999) >>
            class __CollectionRandomInsertionClient <E> << (T, #aa9999) >>
            class __CollectionContainsOfCollectionClient <E> << (T, #aa9999) >>
            class __CollectionContainsOfInitializerListClient <E> << (T, #aa9999) >>
            class __CollectionFindOfCollectionClient <E> << (T, #aa9999) >>
            class __CollectionFindOfInitializerListClient <E> << (T, #aa9999) >>
            class __CollectionFindByClient <E> << (T, #aa9999) >>
            class __CollectionRemoveOfCollectionClient <E> << (T, #aa9999) >>
            class __CollectionRemoveOfInitializerListClient <E> << (T, #aa9999) >>
            class __CollectionRemoveByClient <E> << (T, #aa9999) >>
            class __CollectionGenericStatementsClient <E> << (T, #aa9999) >>

            __CollectionInternalCommunicationChannel ......... "is" __CollectionCommunicationChannel
            __DelegateForwardConstIterablePrimitiveClient ..... "is" __CollectionDelegateForwardConstIterableClient
            __AbstractConstIteratorRemovePrimitiveClient ..... "is" __CollectionConstIteratorRemoveClient
            __RandomInsertionPrimitiveClient ...... "is" __CollectionRandomInsertionClient
            __ContainsOfCompositeClient ..... "is" __CollectionContainsOfCollectionClient
            __ContainsOfCompositeClient .... "is" __CollectionContainsOfInitializerListClient
            __FindOfImmutableCompositeClient .... "is" __CollectionFindOfCollectionClient
            __FindOfImmutableCompositeClient .... "is" __CollectionFindOfInitializerListClient
            __FindByImmutableCompositeClient .... "is" __CollectionFindByClient
            __RemoveOfCompositeClient .... "is" __CollectionRemoveOfCollectionClient
            __RemoveOfCompositeClient .... "is" __CollectionRemoveOfInitializerListClient
            __RemoveByCompositeClient .... "is" __CollectionRemoveByClient
            __GenericImmutableStatementsCompositeClient .... "is" __CollectionGenericStatementsClient

        }
    }

    abstract class Collection <E> extends cds.__hidden.__impl.__CollectionCommunicationChannel implements cds.__hidden.__impl.__CollectionDelegateForwardConstIterableClient, cds.__hidden.__impl.__CollectionConstIteratorRemoveClient, cds.__hidden.__impl.__CollectionRandomInsertionClient, cds.__hidden.__impl.__CollectionContainsOfCollectionClient, cds.__hidden.__impl.__CollectionContainsOfInitializerListClient, cds.__hidden.__impl.__CollectionFindOfCollectionClient, cds.__hidden.__impl.__CollectionFindOfInitializerListClient, cds.__hidden.__impl.__CollectionFindByClient, cds.__hidden.__impl.__CollectionRemoveOfCollectionClient, cds.__hidden.__impl.__CollectionRemoveOfInitializerListClient, cds.__hidden.__impl.__CollectionRemoveByClient, cds.__hidden.__impl.__CollectionGenericStatementsClient, cds.__hidden.__impl.__CollectionFunctions {
        ..base methods..
        # {method} Collection () noexcept
        # {method} Collection (Collection const &) noexcept
        # {method} Collection (Collection &&) noexcept
        # {method} {abstract} ~Collection () noexcept
        ..public methods..
        + {method} {abstract} size () const noexcept -> Size
        + {method} empty () const noexcept -> bool
        + {method} operator bool () const noexcept
        + {method} toString () const noexcept -> String
        + {method} hash () const noexcept -> Size
        + {method} equals (Object const &) const noexcept -> bool
        + {method} {abstract} clear () noexcept -> void
        + {method} contains (E const &) const noexcept -> bool
    }

}

!endif
!endsub

!startsub private
remove cds.__hidden.__impl.__*Local*
remove *LocalHint*
!endsub

@enduml