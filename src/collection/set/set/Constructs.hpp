/* NOLINT(llvm-header-guard)
 * Created by loghin on 7/23/2022.
 */

#ifndef __CDS_SET_CONSTRUCTS_HPP__ /* NOLINT(llvm-header-guard) */
#define __CDS_SET_CONSTRUCTS_HPP__ /* NOLINT(bugprone-reserved-identifier, cert-dcl37-c, cert-dcl51-cpp) */

namespace cds {

    namespace meta {

        /**
         * @brief Meta-Function used to determine whether a given ElementType is containable by a set ( UniqueIdentifiable )
         * @tparam __ElementType is the type checked
         * @return bool = true if the element type can be used, false otherwise
         * @test Not Applicable.
         * @namespace cds :: meta
         * @public
         */
        template < typename __ElementType > /* NOLINT(bugprone-reserved-identifier, cert-dcl37-c, cert-dcl51-cpp) */
        constexpr auto isValidSetElement () noexcept -> bool {

            /* either == is possible, or is derived from cds :: Object and has Object :: equals */
            return
                    cds :: meta :: equalToPossible < __ElementType, __ElementType > () ||
                    cds :: meta :: isDerivedFrom < __ElementType, cds :: Object > ();
        }

    } /* namespace meta */

    /**
     * @class Set pre-declaration
     * @tparam __ElementType is the type of the elements enclosed in the set
     */
    template <
            typename __ElementType, /* NOLINT(bugprone-reserved-identifier, cert-dcl37-c, cert-dcl51-cpp) */
            cds :: meta :: EnableIf <
                    cds :: meta :: isValidSetElement < __ElementType > ()
            > = 0
    > class Set;

    namespace __hidden {    /* NOLINT(modernize-concat-nested-namespaces, bugprone-reserved-identifier, cert-dcl37-c, cert-dcl51-cpp) */
        namespace __impl {  /* NOLINT(bugprone-reserved-identifier, cert-dcl37-c, cert-dcl51-cpp) */

            /**
             * @typedef Alias used by Set to implement the Find Unique Client
             * @tparam __ElementType is the type of elements contained into the Set
             * @tparam __enabler is the enabler value generated by the EnableIf < isValidSetElement >, used only by definitions
             * @namespace cds :: __hidden :: __impl
             * @internal library-private
             */
            template <
                    typename __ElementType, /* NOLINT(bugprone-reserved-identifier, cert-dcl37-c, cert-dcl51-cpp) */
                    cds :: meta :: EnableIf <
                            cds :: meta :: isValidSetElement < __ElementType > ()
                    > __enabler = 0         /* NOLINT(bugprone-reserved-identifier, cert-dcl37-c, cert-dcl51-cpp) */
            > using __SetFindUniqueClient = /* NOLINT(bugprone-reserved-identifier, cert-dcl37-c, cert-dcl51-cpp) */
                    __FindUniqueImmutablePrimitiveClient <
                            cds :: Set < __ElementType, __enabler >,
                            __ElementType,
                            __ElementType,
                            false
                    >;

        } /* namespace __impl */
    } /* namespace __hidden */
} /* namespace cds */

#endif /* __CDS_SET_CONSTRUCTS_HPP__ */
