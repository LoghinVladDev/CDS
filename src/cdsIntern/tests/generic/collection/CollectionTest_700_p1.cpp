#include "CollectionTest.h"
#include "CollectionTest_700_common.hpp"


auto CollectionTest::tests_00700_00799_p1 () noexcept -> bool {
    bool allOk = true;

    this->executeSubtest ( "CollectionTestGroup-FindOf-" __CDS_cpplang_core_version_name " : CTG-00700-FO-" __CDS_cpplang_core_version_name " : IntArray", [this, & allOk] {

        cds :: Array < int > underTest = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

        allOk = allOk && collectionTestGroupFindOf < cds :: Collection < int > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "Collection",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     make_a <int> (-1, -4, -7, 20),
                /* one= */                                      make_a <int> (-9, -8, -7, -6, -5, 4, -3, -2, -1),
                /* moreLessThanLimit= */                        make_a <int> (-9, -8, -7, -6, 5, 4, 3, -2, -1),
                /* more= */                                     make_a <int> (-9, -8, -7, 6, 5, 4, 3, 2, -1),
                /* moreMoreThanLimit= */                        make_a <int> (-9, 8, 7, 6, 5, -4, 3, 2, 1),
                /* all= */                                      make_a <int> (9, 8, 7, 6, 5, 4, 3, 2, 1),
                /* allAndMore= */                               make_a <int> (-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ,15 , 16, 17, 18, 19, 20),
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { 4U },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { 3, 4, 5 },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { 2, 3, 4, 5, 6 },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { 1, 2, 3, 5, 6 },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { 1, 2, 3, 4, 5 },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { 1, 2, 3, 4, 5 },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  -1,
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   4,
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  2,
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   1,
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            1,
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   -1,
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    4,
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   6,
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    9,
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             9,
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { 4 },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { 2, 3, 4, 5, 6 },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { 1, 2, 3, 4, 5, 6, 7, 8, 9 },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { 1, 2, 3, 4, 5 },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { 1, 2, 3, 5, 6 },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { 1, 2, 6, 7, 8 },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { 1, 7, 8, 9 },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { 4, 9 },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               1,
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                1,
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               1,
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                -1,
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         -1,
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                9,
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 9,
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                9,
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 -1,
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          -1,
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { 1, 2, 3, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { 1, 7, 8, 9 },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );

        allOk = allOk && collectionTestGroupFindOf < std :: initializer_list < int > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "InitializerList",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     { -1, -4, -7, 20 },
                /* one= */                                      { -9, -8, -7, -6, -5, 4, -3, -2, -1 },
                /* moreLessThanLimit= */                        { -9, -8, -7, -6, 5, 4, 3, -2, -1 },
                /* more= */                                     { -9, -8, -7, 6, 5, 4, 3, 2, -1 },
                /* moreMoreThanLimit= */                        { -9, 8, 7, 6, 5, -4, 3, 2, 1 },
                /* all= */                                      { 9, 8, 7, 6, 5, 4, 3, 2, 1 },
                /* allAndMore= */                               { -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ,15 , 16, 17, 18, 19, 20 },
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { 4U },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { 3, 4, 5 },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { 2, 3, 4, 5, 6 },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { 1, 2, 3, 5, 6 },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { 1, 2, 3, 4, 5 },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { 1, 2, 3, 4, 5 },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  -1,
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   4,
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  2,
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   1,
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            1,
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   -1,
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    4,
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   6,
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    9,
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             9,
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { 4 },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { 2, 3, 4, 5, 6 },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { 1, 2, 3, 4, 5, 6, 7, 8, 9 },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { 1, 2, 3, 4, 5 },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { 1, 2, 3, 5, 6 },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { 1, 2, 6, 7, 8 },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { 1, 7, 8, 9 },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { 4, 9 },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               1,
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                1,
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               1,
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                -1,
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         -1,
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                9,
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 9,
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                9,
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 -1,
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          -1,
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { 1, 2, 3, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { 1, 7, 8, 9 },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );
    });
    this->executeSubtest ( "CollectionTestGroup-FindOf-" __CDS_cpplang_core_version_name " : CTG-00700-FO-" __CDS_cpplang_core_version_name " : IntLinkedList", [this, & allOk] {

        cds :: LinkedList < int > underTest = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

        allOk = allOk && collectionTestGroupFindOf < cds :: Iterable < int > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "Collection",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     make_ll <int> (-1, -4, -7, 20),
                /* one= */                                      make_ll <int> (-9, -8, -7, -6, -5, 4, -3, -2, -1),
                /* moreLessThanLimit= */                        make_ll <int> (-9, -8, -7, -6, 5, 4, 3, -2, -1),
                /* more= */                                     make_ll <int> (-9, -8, -7, 6, 5, 4, 3, 2, -1),
                /* moreMoreThanLimit= */                        make_ll <int> (-9, 8, 7, 6, 5, -4, 3, 2, 1),
                /* all= */                                      make_ll <int> (9, 8, 7, 6, 5, 4, 3, 2, 1),
                /* allAndMore= */                               make_ll <int> (-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ,15 , 16, 17, 18, 19, 20),
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { 4U },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { 3, 4, 5 },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { 2, 3, 4, 5, 6 },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { 1, 2, 3, 5, 6 },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { 1, 2, 3, 4, 5 },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { 1, 2, 3, 4, 5 },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  -1,
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   4,
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  2,
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   1,
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            1,
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   -1,
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    4,
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   6,
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    9,
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             9,
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { 4 },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { 2, 3, 4, 5, 6 },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { 1, 2, 3, 4, 5, 6, 7, 8, 9 },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { 1, 2, 3, 4, 5 },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { 1, 2, 3, 5, 6 },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { 1, 2, 6, 7, 8 },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { 1, 7, 8, 9 },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { 4, 9 },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               1,
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                1,
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               1,
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                -1,
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         -1,
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                9,
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 9,
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                9,
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 -1,
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          -1,
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { 1, 2, 3, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { 1, 7, 8, 9 },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );

        allOk = allOk && collectionTestGroupFindOf < std :: initializer_list < int > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "InitializerList",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     { -1, -4, -7, 20 },
                /* one= */                                      { -9, -8, -7, -6, -5, 4, -3, -2, -1 },
                /* moreLessThanLimit= */                        { -9, -8, -7, -6, 5, 4, 3, -2, -1 },
                /* more= */                                     { -9, -8, -7, 6, 5, 4, 3, 2, -1 },
                /* moreMoreThanLimit= */                        { -9, 8, 7, 6, 5, -4, 3, 2, 1 },
                /* all= */                                      { 9, 8, 7, 6, 5, 4, 3, 2, 1 },
                /* allAndMore= */                               { -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ,15 , 16, 17, 18, 19, 20 },
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { 4U },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { 3, 4, 5 },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { 2, 3, 4, 5, 6 },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { 1, 2, 3, 5, 6 },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { 1, 2, 3, 4, 5 },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { 1, 2, 3, 4, 5 },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  -1,
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   4,
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  2,
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   1,
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            1,
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   -1,
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    4,
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   6,
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    9,
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             9,
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { 4 },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { 2, 3, 4, 5, 6 },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { 1, 2, 3, 4, 5, 6, 7, 8, 9 },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { 1, 2, 3, 4, 5 },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { 1, 2, 3, 5, 6 },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { 1, 2, 6, 7, 8 },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { 1, 7, 8, 9 },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { 4, 9 },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               1,
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                1,
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               1,
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                -1,
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         -1,
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                9,
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 9,
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                9,
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 -1,
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          -1,
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { 1, 2, 3, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { 1, 7, 8, 9 },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );
    });
    this->executeSubtest ( "CollectionTestGroup-FindOf-" __CDS_cpplang_core_version_name " : CTG-00700-FO-" __CDS_cpplang_core_version_name " : IntHashSet", [this, & allOk] {

        cds :: HashSet < int > underTest = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

        allOk = allOk && collectionTestGroupFindOf < cds :: Iterable < int > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "Collection",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     make_hs <int> (-1, -4, -7, 20),
                /* one= */                                      make_hs <int> (-9, -8, -7, -6, -5, 4, -3, -2, -1),
                /* moreLessThanLimit= */                        make_hs <int> (-9, -8, -7, -6, 5, 4, 3, -2, -1),
                /* more= */                                     make_hs <int> (-9, -8, -7, 6, 5, 4, 3, 2, -1),
                /* moreMoreThanLimit= */                        make_hs <int> (-9, 8, 7, 6, 5, -4, 3, 2, 1),
                /* all= */                                      make_hs <int> (9, 8, 7, 6, 5, 4, 3, 2, 1),
                /* allAndMore= */                               make_hs <int> (-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ,15 , 16, 17, 18, 19, 20),
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { 4U },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { 3, 4, 5 },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { 2, 3, 4, 5, 6 },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { 1, 2, 3, 5, 6 },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { 1, 2, 3, 4, 5 },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { 1, 2, 3, 4, 5 },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  -1,
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   4,
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  2,
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   1,
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            1,
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   -1,
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    4,
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   6,
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    9,
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             9,
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { 4 },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { 2, 3, 4, 5, 6 },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { 1, 2, 3, 4, 5, 6, 7, 8, 9 },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { 1, 2, 3, 4, 5 },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { 1, 2, 3, 5, 6 },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { 1, 2, 6, 7, 8 },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { 1, 7, 8, 9 },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { 4, 9 },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               1,
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                1,
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               1,
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                -1,
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         -1,
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                9,
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 9,
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                9,
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 -1,
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          -1,
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { 1, 2, 3, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { 1, 7, 8, 9 },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );

        allOk = allOk && collectionTestGroupFindOf < std :: initializer_list < int > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "InitializerList",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     { -1, -4, -7, 20 },
                /* one= */                                      { -9, -8, -7, -6, -5, 4, -3, -2, -1 },
                /* moreLessThanLimit= */                        { -9, -8, -7, -6, 5, 4, 3, -2, -1 },
                /* more= */                                     { -9, -8, -7, 6, 5, 4, 3, 2, -1 },
                /* moreMoreThanLimit= */                        { -9, 8, 7, 6, 5, -4, 3, 2, 1 },
                /* all= */                                      { 9, 8, 7, 6, 5, 4, 3, 2, 1 },
                /* allAndMore= */                               { -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ,15 , 16, 17, 18, 19, 20 },
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { 4U },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { 3, 4, 5 },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { 2, 3, 4, 5, 6 },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { 1, 2, 3, 5, 6 },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { 1, 2, 3, 4, 5 },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { 1, 2, 3, 4, 5 },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  -1,
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   4,
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  2,
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   1,
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            1,
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   -1,
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    4,
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   6,
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    9,
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             9,
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { 4 },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { 2, 3, 4, 5, 6 },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { 1, 2, 3, 4, 5, 6, 7, 8, 9 },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { 1, 2, 3, 4, 5 },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { 1, 2, 3, 5, 6 },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { 1, 2, 6, 7, 8 },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { 1, 7, 8, 9 },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { 4, 9 },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               1,
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                1,
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               1,
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                -1,
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         -1,
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                9,
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 9,
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                9,
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 -1,
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          -1,
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { 1, 2, 3, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { 1, 7, 8, 9 },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );
    });
    this->executeSubtest ( "CollectionTestGroup-FindOf-" __CDS_cpplang_core_version_name " : CTG-00700-FO-" __CDS_cpplang_core_version_name " : IntTreeSet", [this, & allOk] {

        cds :: TreeSet < int > underTest = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

        allOk = allOk && collectionTestGroupFindOf < cds :: Iterable < int > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "Collection",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     make_ts <int> (-1, -4, -7, 20),
                /* one= */                                      make_ts <int> (-9, -8, -7, -6, -5, 4, -3, -2, -1),
                /* moreLessThanLimit= */                        make_ts <int> (-9, -8, -7, -6, 5, 4, 3, -2, -1),
                /* more= */                                     make_ts <int> (-9, -8, -7, 6, 5, 4, 3, 2, -1),
                /* moreMoreThanLimit= */                        make_ts <int> (-9, 8, 7, 6, 5, -4, 3, 2, 1),
                /* all= */                                      make_ts <int> (9, 8, 7, 6, 5, 4, 3, 2, 1),
                /* allAndMore= */                               make_ts <int> (-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ,15 , 16, 17, 18, 19, 20),
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { 4U },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { 3, 4, 5 },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { 2, 3, 4, 5, 6 },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { 1, 2, 3, 5, 6 },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { 1, 2, 3, 4, 5 },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { 1, 2, 3, 4, 5 },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  -1,
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   4,
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  2,
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   1,
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            1,
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   -1,
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    4,
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   6,
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    9,
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             9,
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { 4 },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { 2, 3, 4, 5, 6 },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { 1, 2, 3, 4, 5, 6, 7, 8, 9 },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { 1, 2, 3, 4, 5 },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { 1, 2, 3, 5, 6 },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { 1, 2, 6, 7, 8 },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { 1, 7, 8, 9 },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { 4, 9 },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               1,
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                1,
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               1,
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                -1,
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         -1,
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                9,
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 9,
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                9,
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 -1,
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          -1,
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { 1, 2, 3, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { 1, 7, 8, 9 },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );

        allOk = allOk && collectionTestGroupFindOf < std :: initializer_list < int > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "InitializerList",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     { -1, -4, -7, 20 },
                /* one= */                                      { -9, -8, -7, -6, -5, 4, -3, -2, -1 },
                /* moreLessThanLimit= */                        { -9, -8, -7, -6, 5, 4, 3, -2, -1 },
                /* more= */                                     { -9, -8, -7, 6, 5, 4, 3, 2, -1 },
                /* moreMoreThanLimit= */                        { -9, 8, 7, 6, 5, -4, 3, 2, 1 },
                /* all= */                                      { 9, 8, 7, 6, 5, 4, 3, 2, 1 },
                /* allAndMore= */                               { -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ,15 , 16, 17, 18, 19, 20 },
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { 4U },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { 3, 4, 5 },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { 2, 3, 4, 5, 6 },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { 1, 2, 3, 5, 6 },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { 1, 2, 3, 4, 5 },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { 1, 2, 3, 4, 5 },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  -1,
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   4,
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  2,
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   1,
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            1,
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   -1,
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    4,
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   6,
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    9,
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             9,
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { 4 },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { 2, 3, 4, 5, 6 },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { 1, 2, 3, 4, 5, 6, 7, 8, 9 },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { 1, 2, 3, 4, 5 },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { 1, 2, 3, 5, 6 },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { 1, 2, 6, 7, 8 },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { 1, 7, 8, 9 },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { 4, 9 },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               1,
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                1,
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               1,
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                -1,
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         -1,
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                9,
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 9,
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                9,
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 -1,
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          -1,
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { 1, 2, 3, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { 1, 7, 8, 9 },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );
    });
    this->executeSubtest ( "CollectionTestGroup-FindOf-" __CDS_cpplang_core_version_name " : CTG-00700-FO-" __CDS_cpplang_core_version_name " : IntLinkedHashSet", [this, & allOk] {

        cds :: LinkedHashSet < int > underTest = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

        allOk = allOk && collectionTestGroupFindOf < cds :: Iterable < int > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "Collection",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     make_ts <int> (-1, -4, -7, 20),
                /* one= */                                      make_ts <int> (-9, -8, -7, -6, -5, 4, -3, -2, -1),
                /* moreLessThanLimit= */                        make_ts <int> (-9, -8, -7, -6, 5, 4, 3, -2, -1),
                /* more= */                                     make_ts <int> (-9, -8, -7, 6, 5, 4, 3, 2, -1),
                /* moreMoreThanLimit= */                        make_ts <int> (-9, 8, 7, 6, 5, -4, 3, 2, 1),
                /* all= */                                      make_ts <int> (9, 8, 7, 6, 5, 4, 3, 2, 1),
                /* allAndMore= */                               make_ts <int> (-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ,15 , 16, 17, 18, 19, 20),
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { 4U },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { 3, 4, 5 },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { 2, 3, 4, 5, 6 },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { 1, 2, 3, 5, 6 },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { 1, 2, 3, 4, 5 },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { 1, 2, 3, 4, 5 },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  -1,
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   4,
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  2,
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   1,
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            1,
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   -1,
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    4,
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   6,
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    9,
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             9,
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { 4 },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { 2, 3, 4, 5, 6 },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { 1, 2, 3, 4, 5, 6, 7, 8, 9 },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { 1, 2, 3, 4, 5 },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { 1, 2, 3, 5, 6 },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { 1, 2, 6, 7, 8 },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { 1, 7, 8, 9 },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { 4, 9 },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               1,
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                1,
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               1,
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                -1,
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         -1,
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                9,
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 9,
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                9,
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 -1,
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          -1,
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { 1, 2, 3, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { 1, 7, 8, 9 },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );

        allOk = allOk && collectionTestGroupFindOf < std :: initializer_list < int > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "InitializerList",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     { -1, -4, -7, 20 },
                /* one= */                                      { -9, -8, -7, -6, -5, 4, -3, -2, -1 },
                /* moreLessThanLimit= */                        { -9, -8, -7, -6, 5, 4, 3, -2, -1 },
                /* more= */                                     { -9, -8, -7, 6, 5, 4, 3, 2, -1 },
                /* moreMoreThanLimit= */                        { -9, 8, 7, 6, 5, -4, 3, 2, 1 },
                /* all= */                                      { 9, 8, 7, 6, 5, 4, 3, 2, 1 },
                /* allAndMore= */                               { -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ,15 , 16, 17, 18, 19, 20 },
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { 4U },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { 3, 4, 5 },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { 2, 3, 4, 5, 6 },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { 1, 2, 3, 5, 6 },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { 1, 2, 3, 4, 5 },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { 1, 2, 3, 4, 5 },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  -1,
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   4,
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  2,
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   1,
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            1,
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   -1,
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    4,
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   6,
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    9,
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             9,
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { 4 },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { 2, 3, 4, 5, 6 },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { 1, 2, 3, 4, 5, 6, 7, 8, 9 },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { 1, 2, 3, 4, 5 },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { 1, 2, 3, 5, 6 },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { 1, 2, 6, 7, 8 },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { 1, 7, 8, 9 },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { 4, 9 },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               1,
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                1,
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               1,
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                -1,
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         -1,
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                9,
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 9,
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                9,
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 -1,
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          -1,
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { 1, 2, 3, 5, 6, 7, 8, 9 },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { 1, 7, 8, 9 },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );
    });
    this->executeSubtest ( "CollectionTestGroup-FindOf-" __CDS_cpplang_core_version_name " : CTG-00700-FO-" __CDS_cpplang_core_version_name " : IntToIntHashMap", [this, & allOk] {

        cds :: HashMap < int, int > underTest = { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} };

        allOk = allOk && collectionTestGroupFindOf < cds :: Iterable < MapEntry < int, int > > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "Collection",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     cds::HashMap <int, int> {{-1, -1}, {-4, -4}, {-7, -7}, {20, 20}},
                /* one= */                                      cds::HashMap <int, int> {{-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {-5, -5}, {4, 4}, {-3, -3}, {-2, -2}, {-1, -1}},
                /* moreLessThanLimit= */                        cds::HashMap <int, int> {{-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {5, 5}, {4, 4}, {3, 3}, {-2, -2}, {-1, -1}},
                /* more= */                                     cds::HashMap <int, int> {{-9, -9}, {-8, -8}, {-7, -7}, {6, 6}, {5, 5}, {4, 4}, {3, 3}, {2, 2}, {-1, -1}},
                /* moreMoreThanLimit= */                        cds::HashMap <int, int> {{-9, -9}, {8, 8}, {7, 7}, {6, 6}, {5, 5}, {-4, -4}, {3, 3}, {2, 2}, {1, 1}},
                /* all= */                                      cds::HashMap <int, int> {{9, 9}, {8, 8}, {7, 7}, {6, 6}, {5, 5}, {4, 4}, {3, 3}, {2, 2}, {1, 1}},
                /* allAndMore= */                               cds::HashMap <int, int> {{-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {-5, -5}, {-4, -4}, {-3, -3}, {-2, -2}, {-1, -1}, {0, 0}, {1, 1}, {2, 2}, {3, 3},
                                                                        {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {10, 10}, {11, 11}, {12, 12}, {13, 13}, {14, 14}, {15, 15}, {16, 16}, {17, 17}, {18, 18}, {19, 19}, {20, 20}},
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { {4, 4} },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6} },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6} },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  {-1, -1},
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   {4, 4},
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  {2, 2},
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   {1, 1},
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            {1, 1},
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   {-1, -1},
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    {4, 4},
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   {6, 6},
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    {9, 9},
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             {9, 9},
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { {4, 4} },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6} },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6} },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { {1, 1}, {2, 2}, {6, 6}, {7, 7}, {8, 8} },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { {1, 1}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { {4, 4}, {9, 9} },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               {1, 1},
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                {1, 1},
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               {1, 1},
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                {-1, -1},
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         {-1, -1},
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                {9, 9},
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 {9, 9},
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                {9, 9},
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 {-1, -1},
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          {-1, -1},
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { {1, 1}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );

        allOk = allOk && collectionTestGroupFindOf < std :: initializer_list < MapEntry < int, int > > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "InitializerList",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     { {-1, -1}, {-4, -4}, {-7, -7}, {20, 20} },
                /* one= */                                      { {-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {-5, -5}, {4, 4}, {-3, -3}, {-2, -2}, {-1, -1} },
                /* moreLessThanLimit= */                        { {-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {5, 5}, {4, 4}, {3, 3}, {-2, -2}, {-1, -1} },
                /* more= */                                     { {-9, -9}, {-8, -8}, {-7, -7}, {6, 6}, {5, 5}, {4, 4}, {3, 3}, {2, 2}, {-1, -1} },
                /* moreMoreThanLimit= */                        { {-9, -9}, {8, 8}, {7, 7}, {6, 6}, {5, 5}, {-4, -4}, {3, 3}, {2, 2}, {1, 1} },
                /* all= */                                      { {9, 9}, {8, 8}, {7, 7}, {6, 6}, {5, 5}, {4, 4}, {3, 3}, {2, 2}, {1, 1} },
                /* allAndMore= */                               { {-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {-5, -5}, {-4, -4}, {-3, -3}, {-2, -2}, {-1, -1}, {0, 0}, {1, 1}, {2, 2}, {3, 3},
                                                                  {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {10, 10}, {11, 11}, {12, 12}, {13, 13}, {14, 14}, {15, 15}, {16, 16}, {17, 17}, {18, 18}, {19, 19}, {20, 20} },
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { {4, 4} },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6} },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6} },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  {-1, -1},
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   {4, 4},
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  {2, 2},
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   {1, 1},
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            {1, 1},
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   {-1, -1},
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    {4, 4},
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   {6, 6},
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    {9, 9},
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             {9, 9},
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { {4, 4} },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6} },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6} },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { {1, 1}, {2, 2}, {6, 6}, {7, 7}, {8, 8} },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { {1, 1}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { {4, 4}, {9, 9} },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               {1, 1},
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                {1, 1},
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               {1, 1},
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                {-1, -1},
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         {-1, -1},
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                {9, 9},
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 {9, 9},
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                {9, 9},
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 {-1, -1},
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          {-1, -1},
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { {1, 1}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );
    });
    this->executeSubtest ( "CollectionTestGroup-FindOf-" __CDS_cpplang_core_version_name " : CTG-00700-FO-" __CDS_cpplang_core_version_name " : IntToIntLinkedHashMap", [this, & allOk] {

        cds :: LinkedHashMap < int, int > underTest = { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} };

        allOk = allOk && collectionTestGroupFindOf < cds :: Iterable < MapEntry < int, int > > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "Collection",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     cds::LinkedHashMap <int, int> {{-1, -1}, {-4, -4}, {-7, -7}, {20, 20}},
                /* one= */                                      cds::LinkedHashMap <int, int> {{-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {-5, -5}, {4, 4}, {-3, -3}, {-2, -2}, {-1, -1}},
                /* moreLessThanLimit= */                        cds::LinkedHashMap <int, int> {{-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {5, 5}, {4, 4}, {3, 3}, {-2, -2}, {-1, -1}},
                /* more= */                                     cds::LinkedHashMap <int, int> {{-9, -9}, {-8, -8}, {-7, -7}, {6, 6}, {5, 5}, {4, 4}, {3, 3}, {2, 2}, {-1, -1}},
                /* moreMoreThanLimit= */                        cds::LinkedHashMap <int, int> {{-9, -9}, {8, 8}, {7, 7}, {6, 6}, {5, 5}, {-4, -4}, {3, 3}, {2, 2}, {1, 1}},
                /* all= */                                      cds::LinkedHashMap <int, int> {{9, 9}, {8, 8}, {7, 7}, {6, 6}, {5, 5}, {4, 4}, {3, 3}, {2, 2}, {1, 1}},
                /* allAndMore= */                               cds::LinkedHashMap <int, int> {{-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {-5, -5}, {-4, -4}, {-3, -3}, {-2, -2}, {-1, -1}, {0, 0}, {1, 1}, {2, 2}, {3, 3},
                                                                         {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {10, 10}, {11, 11}, {12, 12}, {13, 13}, {14, 14}, {15, 15}, {16, 16}, {17, 17}, {18, 18}, {19, 19}, {20, 20}},
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { {4, 4} },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6} },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6} },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  {-1, -1},
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   {4, 4},
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  {2, 2},
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   {1, 1},
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            {1, 1},
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   {-1, -1},
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    {4, 4},
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   {6, 6},
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    {9, 9},
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             {9, 9},
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { {4, 4} },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6} },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6} },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { {1, 1}, {2, 2}, {6, 6}, {7, 7}, {8, 8} },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { {1, 1}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { {4, 4}, {9, 9} },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               {1, 1},
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                {1, 1},
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               {1, 1},
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                {-1, -1},
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         {-1, -1},
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                {9, 9},
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 {9, 9},
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                {9, 9},
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 {-1, -1},
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          {-1, -1},
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { {1, 1}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );

        allOk = allOk && collectionTestGroupFindOf < std :: initializer_list < MapEntry < int, int > > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "InitializerList",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     { {-1, -1}, {-4, -4}, {-7, -7}, {20, 20} },
                /* one= */                                      { {-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {-5, -5}, {4, 4}, {-3, -3}, {-2, -2}, {-1, -1} },
                /* moreLessThanLimit= */                        { {-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {5, 5}, {4, 4}, {3, 3}, {-2, -2}, {-1, -1} },
                /* more= */                                     { {-9, -9}, {-8, -8}, {-7, -7}, {6, 6}, {5, 5}, {4, 4}, {3, 3}, {2, 2}, {-1, -1} },
                /* moreMoreThanLimit= */                        { {-9, -9}, {8, 8}, {7, 7}, {6, 6}, {5, 5}, {-4, -4}, {3, 3}, {2, 2}, {1, 1} },
                /* all= */                                      { {9, 9}, {8, 8}, {7, 7}, {6, 6}, {5, 5}, {4, 4}, {3, 3}, {2, 2}, {1, 1} },
                /* allAndMore= */                               { {-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {-5, -5}, {-4, -4}, {-3, -3}, {-2, -2}, {-1, -1}, {0, 0}, {1, 1}, {2, 2}, {3, 3},
                                                                  {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {10, 10}, {11, 11}, {12, 12}, {13, 13}, {14, 14}, {15, 15}, {16, 16}, {17, 17}, {18, 18}, {19, 19}, {20, 20} },
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { {4, 4} },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6} },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6} },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  {-1, -1},
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   {4, 4},
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  {2, 2},
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   {1, 1},
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            {1, 1},
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   {-1, -1},
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    {4, 4},
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   {6, 6},
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    {9, 9},
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             {9, 9},
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { {4, 4} },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6} },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6} },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { {1, 1}, {2, 2}, {6, 6}, {7, 7}, {8, 8} },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { {1, 1}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { {4, 4}, {9, 9} },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               {1, 1},
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                {1, 1},
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               {1, 1},
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                {-1, -1},
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         {-1, -1},
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                {9, 9},
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 {9, 9},
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                {9, 9},
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 {-1, -1},
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          {-1, -1},
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { {1, 1}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );
    });
    this->executeSubtest ( "CollectionTestGroup-FindOf-" __CDS_cpplang_core_version_name " : CTG-00700-FO-" __CDS_cpplang_core_version_name " : IntToIntTreeMap", [this, & allOk] {

        cds :: TreeMap < int, int > underTest = { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} };

        allOk = allOk && collectionTestGroupFindOf < cds :: Collection < MapEntry < int, int > > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "Collection",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     cds::LinkedHashMap <int, int> {{-1, -1}, {-4, -4}, {-7, -7}, {20, 20}},
                /* one= */                                      cds::LinkedHashMap <int, int> {{-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {-5, -5}, {4, 4}, {-3, -3}, {-2, -2}, {-1, -1}},
                /* moreLessThanLimit= */                        cds::LinkedHashMap <int, int> {{-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {5, 5}, {4, 4}, {3, 3}, {-2, -2}, {-1, -1}},
                /* more= */                                     cds::LinkedHashMap <int, int> {{-9, -9}, {-8, -8}, {-7, -7}, {6, 6}, {5, 5}, {4, 4}, {3, 3}, {2, 2}, {-1, -1}},
                /* moreMoreThanLimit= */                        cds::LinkedHashMap <int, int> {{-9, -9}, {8, 8}, {7, 7}, {6, 6}, {5, 5}, {-4, -4}, {3, 3}, {2, 2}, {1, 1}},
                /* all= */                                      cds::LinkedHashMap <int, int> {{9, 9}, {8, 8}, {7, 7}, {6, 6}, {5, 5}, {4, 4}, {3, 3}, {2, 2}, {1, 1}},
                /* allAndMore= */                               cds::LinkedHashMap <int, int> {{-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {-5, -5}, {-4, -4}, {-3, -3}, {-2, -2}, {-1, -1}, {0, 0}, {1, 1}, {2, 2}, {3, 3},
                                                                         {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {10, 10}, {11, 11}, {12, 12}, {13, 13}, {14, 14}, {15, 15}, {16, 16}, {17, 17}, {18, 18}, {19, 19}, {20, 20}},
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { {4, 4} },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6} },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6} },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  {-1, -1},
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   {4, 4},
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  {2, 2},
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   {1, 1},
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            {1, 1},
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   {-1, -1},
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    {4, 4},
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   {6, 6},
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    {9, 9},
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             {9, 9},
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { {4, 4} },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6} },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6} },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { {1, 1}, {2, 2}, {6, 6}, {7, 7}, {8, 8} },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { {1, 1}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { {4, 4}, {9, 9} },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               {1, 1},
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                {1, 1},
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               {1, 1},
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                {-1, -1},
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         {-1, -1},
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                {9, 9},
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 {9, 9},
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                {9, 9},
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 {-1, -1},
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          {-1, -1},
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { {1, 1}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );

        allOk = allOk && collectionTestGroupFindOf < std :: initializer_list < MapEntry < int, int > > > (
                /* pTestLib= */                                 this,
                /* variant= */                                  "InitializerList",
                /* underTest= */                                underTest,
                /* limit= */                                    5U,
                /* none= */                                     { {-1, -1}, {-4, -4}, {-7, -7}, {20, 20} },
                /* one= */                                      { {-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {-5, -5}, {4, 4}, {-3, -3}, {-2, -2}, {-1, -1} },
                /* moreLessThanLimit= */                        { {-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {5, 5}, {4, 4}, {3, 3}, {-2, -2}, {-1, -1} },
                /* more= */                                     { {-9, -9}, {-8, -8}, {-7, -7}, {6, 6}, {5, 5}, {4, 4}, {3, 3}, {2, 2}, {-1, -1} },
                /* moreMoreThanLimit= */                        { {-9, -9}, {8, 8}, {7, 7}, {6, 6}, {5, 5}, {-4, -4}, {3, 3}, {2, 2}, {1, 1} },
                /* all= */                                      { {9, 9}, {8, 8}, {7, 7}, {6, 6}, {5, 5}, {4, 4}, {3, 3}, {2, 2}, {1, 1} },
                /* allAndMore= */                               { {-9, -9}, {-8, -8}, {-7, -7}, {-6, -6}, {-5, -5}, {-4, -4}, {-3, -3}, {-2, -2}, {-1, -1}, {0, 0}, {1, 1}, {2, 2}, {3, 3},
                                                                  {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {10, 10}, {11, 11}, {12, 12}, {13, 13}, {14, 14}, {15, 15}, {16, 16}, {17, 17}, {18, 18}, {19, 19}, {20, 20} },
                /* expectedSizeFindOfNone= */                   0U,
                /* expectedFindOfNone= */                       {},
                /* expectedSizeFindOfOne= */                    1U,
                /* expectedFindOfOne= */                        { {4, 4} },
                /* expectedSizeFindOfMoreLessThanLimit= */      3U,
                /* expectedFindOfMoreLessThanLimit= */          { {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindOfMore= */                   5U,
                /* expectedFindOfMore= */                       { {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6} },
                /* expectedSizeFindOfMoreMoreThanLimit= */      5U,
                /* expectedFindOfMoreMoreThanLimit= */          { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6} },
                /* expectedSizeFindOfAll= */                    5U,
                /* expectedFindOfAll= */                        { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindOfAllAndMore= */             5U,
                /* expectedFindOfAllAndMore= */                 { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedResultFindFirstOfNone= */            false,
                /* expectedFindFirstOfNone= */                  {-1, -1},
                /* expectedResultFindFirstOfOne= */             true,
                /* expectedFindFirstOfOne= */                   {4, 4},
                /* expectedResultFindFirstOfMore= */            true,
                /* expectedFindFirstOfMore= */                  {2, 2},
                /* expectedResultFindFirstOfAll= */             true,
                /* expectedFindFirstOfAll= */                   {1, 1},
                /* expectedResultFindFirstOfAllAndMore= */      true,
                /* expectedFindFirstOfAllAndMore= */            {1, 1},
                /* expectedResultFindLastOfNone= */             false,
                /* expectedFindLastOfNone= */                   {-1, -1},
                /* expectedResultFindLastOfOne= */              true,
                /* expectedFindLastOfOne= */                    {4, 4},
                /* expectedResultFindLastOfMore= */             true,
                /* expectedFindLastOfMore= */                   {6, 6},
                /* expectedResultFindLastOfAll= */              true,
                /* expectedFindLastOfAll= */                    {9, 9},
                /* expectedResultFindLastOfAllAndMore= */       true,
                /* expectedFindLastOfAllAndMore= */             {9, 9},
                /* expectedSizeFindAllOfNone= */                0U,
                /* expectedFindAllOfNone= */                    {},
                /* expectedSizeFindAllOfOne= */                 1U,
                /* expectedFindAllOfOne= */                     { {4, 4} },
                /* expectedSizeFindAllOfMore= */                5U,
                /* expectedFindAllOfMore= */                    { {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6} },
                /* expectedSizeFindAllOfAll= */                 9U,
                /* expectedFindAllOfAll= */                     { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllOfAllAndMore= */          9U,
                /* expectedFindAllOfAllAndMore= */              { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },

                /* expectedSizeFindNotOfNone= */                5U,
                /* expectedFindNotOfNone= */                    { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5} },
                /* expectedSizeFindNotOfOne= */                 5U,
                /* expectedFindNotOfOne= */                     { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6} },
                /* expectedSizeFindNotOfMoreLessThanLimit= */   5U,
                /* expectedFindNotOfMoreLessThanLimit= */       { {1, 1}, {2, 2}, {6, 6}, {7, 7}, {8, 8} },
                /* expectedSizeFindNotOfMore= */                4U,
                /* expectedFindNotOfMore= */                    { {1, 1}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindNotOfMoreMoreThanLimit= */   2U,
                /* expectedFindNotOfMoreMoreThanLimit= */       { {4, 4}, {9, 9} },
                /* expectedSizeFindNotOfAll= */                 0U,
                /* expectedFindNotOfAll= */                     {},
                /* expectedSizeFindNotOfAllAndMore= */          0U,
                /* expectedFindNotOfAllAndMore= */              {},
                /* expectedResultFindFirstNotOfNone= */         true,
                /* expectedFindFirstNotOfNone= */               {1, 1},
                /* expectedResultFindFirstNotOfOne= */          true,
                /* expectedFindFirstNotOfOne= */                {1, 1},
                /* expectedResultFindFirstNotOfMore= */         true,
                /* expectedFindFirstNotOfMore= */               {1, 1},
                /* expectedResultFindFirstNotOfAll= */          false,
                /* expectedFindFirstNotOfAll= */                {-1, -1},
                /* expectedResultFindFirstNotOfAllAndMore= */   false,
                /* expectedFindFirstNotOfAllAndMore= */         {-1, -1},
                /* expectedResultFindLastNotOfNone= */          true,
                /* expectedFindLastNotOfNone= */                {9, 9},
                /* expectedResultFindLastNotOfOne= */           true,
                /* expectedFindLastNotOfOne= */                 {9, 9},
                /* expectedResultFindLastNotOfMore= */          true,
                /* expectedFindLastNotOfMore= */                {9, 9},
                /* expectedResultFindLastNotOfAll= */           false,
                /* expectedFindLastNotOfAll= */                 {-1, -1},
                /* expectedResultFindLastNotOfAllAndMore= */    false,
                /* expectedFindLastNotOfAllAndMore= */          {-1, -1},
                /* expectedSizeFindAllNotOfNone= */             9U,
                /* expectedFindAllNotOfNone= */                 { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfOne= */              8U,
                /* expectedFindAllNotOfOne= */                  { {1, 1}, {2, 2}, {3, 3}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfMore= */             4U,
                /* expectedFindAllNotOfMore= */                 { {1, 1}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedSizeFindAllNotOfAll= */              0U,
                /* expectedFindAllNotOfAll= */                  {},
                /* expectedSizeFindAllNotOfAllAndMore= */       0U,
                /* expectedFindAllNotOfAllAndMore= */           {}
        );
    });

    return allOk;
}
