#ifndef COLLECTION_TEST_450_DATA_HPP
#define COLLECTION_TEST_450_DATA_HPP

#include <initializer_list>
#include <CDS/Map>

namespace data {


    template <typename T>
    auto composeTestObject () noexcept -> std::initializer_list<T> {
        static std::initializer_list <T> const data = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        return data;
    }

    template <typename T>
    auto composeTestDataGroups () noexcept -> std::initializer_list<std::initializer_list<T>> {
        static std::initializer_list<std::initializer_list<T>> const data = {
                {10, 11, 12, 13},
                {16, 6, 11, 12, 13},
                {20, 123, 5, 1230, 435, 3, 1235, 9534},
                {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                {2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 }
        };

        return data;
    }

    template <typename T>
    auto composeTestResultGroups () noexcept -> std::initializer_list<std::initializer_list<T>> {
        static std::initializer_list<std::initializer_list<T>> const data = {
                {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                {1, 2, 3, 4, 5, 7, 8, 9 },
                {1, 2, 4, 6, 7, 8, 9 },
                {1, 2, 4, 6, 8, 9 },
                {1, 4, 6, 7, 8, 9 },
                {4, 5, 6, 7, 8, 9 },
                {4, 5, 6, 7, 8, 9 },
                {4, 5, 6, 7, 8, 9 },
                {4, 5, 6, 7, 8, 9 },
                {3, 5, 6, 7, 8, 9 },
                {3, 5, 6, 7, 8, 9 },
                {2, 3, 5, 7, 8, 9 },
                {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                {1, 2, 3, 4, 5, 6, 7, 8, 9 },

                {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                {1, 2, 3, 4, 5, 7, 8, 9 },
                {1, 2, 4, 6, 8, 9 },
                {},
                {},
                {},
                { 6 },
                { 3, 5, 7 },
                { 1 ,2, 3, 4, 5, 6, 7, 8, 9 },
                { 1, 2, 3, 4, 5, 6, 7, 8, 9},

                {1, 2, 3, 4, 5, 6, 7, 8, 9},
                {1, 2, 3, 4, 5, 7, 8, 9},
                {1, 2, 4, 5, 6, 7, 8, 9},
                {2, 3, 4, 5, 6, 7, 8, 9},
                {2, 3, 4, 5, 6, 7, 8, 9},
                {2, 3, 4, 5, 6, 7, 8, 9},
                {2, 3, 4, 5, 6, 7, 8, 9},
                {2, 3, 4, 5, 6, 7, 8, 9},
                {1, 2, 3, 4, 5, 6, 7, 8, 9},
                {1, 2, 3, 4, 5, 6, 7, 8, 9},

                {1, 2, 3, 4, 5, 6, 7, 8, 9},
                {1, 2, 3, 4, 5, 7, 8, 9},
                {1, 2, 3, 4, 5, 6, 8, 9},
                {1, 2, 3, 4, 5, 6, 7, 8},
                {1, 2, 3, 4, 5, 6, 7, 8},
                {1, 2, 3, 4, 5, 6, 7, 8},
                {1, 2, 3, 4, 5, 6, 7, 8},
                {1, 2, 3, 4, 5, 6, 7, 8},
                {1, 2, 3, 4, 5, 6, 7, 8, 9},
                {1, 2, 3, 4, 5, 6, 7, 8, 9}
        };

        return data;
    }

    template <typename T>
    auto hashComposeTestResultGroups () noexcept -> std::initializer_list<std::initializer_list<T>> {
        static std::initializer_list<std::initializer_list<T>> const data = {
                {4, 5, 6, 7, 8, 9, 1, 2, 3 },
                {4, 5, 7, 8, 9, 1, 2, 3 },
                {4, 6, 7, 8, 9, 1, 2 },
                {4, 6, 8, 9, 1, 2 },
                {4, 6, 8, 9, 1, 3 },
                {7, 8, 9, 1 ,2, 3 },
                {7, 8, 9, 1, 2, 3 },
                {7, 8, 9, 1, 2, 3 },
                {6, 8, 9, 1, 2, 3 },
                {5, 8, 9, 1, 2, 3 },
                {5, 7, 9, 1, 2, 3 },
                {5, 7, 9, 1, 2, 3 },
                {4, 5, 6, 7, 8, 9, 1, 2, 3 },
                {4, 5, 6, 7, 8, 9, 1, 2, 3 },

                {4, 5, 6, 7, 8, 9, 1, 2, 3 },
                {4, 5, 7, 8, 9, 1, 2, 3 },
                {4, 6, 8, 9, 1, 2 },
                {},
                {},
                {},
                {6 },
                {5, 7, 3 },
                {4, 5, 6, 7, 8, 9, 1, 2, 3 },
                {4, 5, 6, 7, 8, 9, 1, 2, 3 },

                {4, 5, 6, 7, 8, 9, 1, 2, 3 },
                {4, 5, 7, 8, 9, 1, 2, 3 },
                {4, 6, 7, 8, 9, 1, 2, 3 },
                {5, 6, 7, 8, 9, 1, 2, 3 },
                {5, 6, 7, 8, 9, 1, 2, 3 },
                {5, 6, 7, 8, 9, 1, 2, 3},
                {5, 6, 7, 8, 9, 1, 2, 3},
                {5, 6, 7, 8, 9, 1, 2, 3},
                {4, 5, 6, 7, 8, 9, 1, 2, 3},
                {4, 5, 6, 7, 8, 9, 1, 2, 3},

                {4, 5, 6, 7, 8, 9, 1, 2, 3 },
                {4, 5, 7, 8, 9, 1, 2, 3 },
                {4, 5, 6, 7, 8, 9, 1, 2 },
                {4, 5, 6, 7, 8, 9, 1, 2 },
                {4, 5, 6, 7, 8, 9, 1, 2 },
                {4, 5, 6, 7, 8, 9, 1, 2 },
                {4, 5, 6, 7, 8, 9, 1, 2},
                {4, 5, 6, 7, 8, 9, 1, 3},
                {4, 5, 6, 7, 8, 9, 1, 2, 3 },
                {4, 5, 6, 7, 8, 9, 1, 2, 3 }
        };

        return data;
    }

    template <typename T>
    auto composeMapTestObject () noexcept -> std::initializer_list<cds::MapEntry <T, T>> {
        static std::initializer_list <cds::MapEntry <T, T>> const data = { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} };
        return data;
    }

    template <typename T>
    auto composeMapTestDataGroups () noexcept -> std::initializer_list<std::initializer_list<cds::MapEntry <T, T>>> {
        static std::initializer_list <std::initializer_list <cds::MapEntry <T, T>>> const data = {
                {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {1235, 1235}, {9534, 9534}},
                {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                {{2, 2}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                {{9, 9}, {2, 2}, {5, 5}, {1, 1} , {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, 
                    {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} }
        };

        return data;
    }

    template <typename T>
    auto composeMapTestResultGroups () noexcept -> std::initializer_list <std::initializer_list <cds::MapEntry <T, T>>> {
        static std::initializer_list <std::initializer_list <cds::MapEntry <T, T>>> const data = {
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9} },
                {{1, 1}, {2, 2}, {4, 4}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{1, 1}, {2, 2}, {4, 4}, {6, 6}, {8, 8}, {9, 9} },
                {{1, 1}, {4, 4}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{3, 3}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{3, 3}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{2, 2}, {3, 3}, {5, 5}, {7, 7}, {8, 8}, {9, 9} },
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },

                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9} },
                {{1, 1}, {2, 2}, {4, 4}, {6, 6}, {8, 8}, {9, 9} },
                {},
                {},
                {},
                {{6, 6} },
                {{3, 3}, {5, 5}, {7, 7} },
                {{1, 1} ,{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },

                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9} },
                {{1, 1}, {2, 2}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},

                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9} },
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {8, 8}, {9, 9} },
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8} },
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8} },
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8} },
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}},
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}},
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}}
        };

        return data;
    }

    template <typename T>
    auto hashMapComposeTestResultGroups () noexcept -> std::initializer_list<std::initializer_list<cds::MapEntry <T, T>>> {
        static std::initializer_list<std::initializer_list<cds::MapEntry <T, T>>> const data = {
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{4, 4}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2} },
                {{4, 4}, {6, 6}, {8, 8}, {9, 9}, {1, 1}, {2, 2} },
                {{4, 4}, {6, 6}, {8, 8}, {9, 9}, {1, 1}, {3, 3} },
                {{7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{6, 6}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{5, 5}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{5, 5}, {7, 7}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{5, 5}, {7, 7}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },

                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{4, 4}, {6, 6}, {8, 8}, {9, 9}, {1, 1}, {2, 2} },
                {},
                {},
                {},
                {{6, 6} },
                {{5, 5}, {7, 7}, {3, 3} },
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },

                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{4, 4}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3}},
                {{5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3}},
                {{5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3}},
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3}},
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3}},

                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2} },
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2} },
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2} },
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2} },
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}},
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {3, 3}},
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} },
                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {1, 1}, {2, 2}, {3, 3} }
        };

        return data;
    }

    static auto const iData = composeTestObject <int> ();
    static auto const iDataGroups = composeTestDataGroups <int> ();
    static auto const iResultGroups = composeTestResultGroups <int> ();

    static auto const iiData = composeMapTestObject <int> ();
    static auto const iiDataGroups = composeMapTestDataGroups <int> ();
    static auto const iiResultGroups = composeMapTestResultGroups <int> ();

    static auto const sData = composeTestObject <cds::String> ();
    static auto const sDataGroups = composeTestDataGroups <cds::String> ();
    static auto const sResultGroups = composeTestResultGroups <cds::String> ();
    static auto const usResultGroups = hashComposeTestResultGroups <cds::String> ();

    static auto const ssData = composeMapTestObject <cds::String> ();
    static auto const ssDataGroups = composeMapTestDataGroups <cds::String> ();
    static auto const ossResultGroups = composeMapTestResultGroups <cds::String> ();
    static auto const ssResultGroups = hashMapComposeTestResultGroups <cds::String> ();
}

#endif 