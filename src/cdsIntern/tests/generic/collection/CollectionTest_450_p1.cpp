#include "CollectionTest.h"
#include "CollectionTest_450_common.hpp"


auto CollectionTest::tests_00450_00599_p1 () noexcept -> bool {

    bool allOk = true;

    this->executeSubtest ( "CollectionTestGroup-RemoveOf-" __CDS_cpplang_core_version_name " : CTG-00450-RO-" __CDS_cpplang_core_version_name " : IntArray", [this, & allOk]{

        cds :: Array < int > underTest = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

        allOk = allOk && collectionTestGroupItemRemoveOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "Collection",
                /* subvariant= */                               "removeOf",
                /* subvariantOffset= */                         0,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               make_a <int> ( 10, 11, 12, 13),
                /* oneCommon= */                                make_a <int> ( 16, 6, 11, 12, 13),
                /* moreLessThanLimitCommon= */                  make_a <int> ( 20, 123, 5, 1230, 435, 3, 1235, 9534),
                /* moreCommon= */                               make_a <int> ( 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* moreMoreThanLimitCommon= */                  make_a <int> ( 2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                                make_a <int> ( 9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                         make_a <int> ( 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */                   0U,
                /* expectedCollectionFromNone= */               make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */                    1U,
                /* expectedCollectionFromOne= */                make_a <int> ( 1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMoreLessThanLimit= */      2U,
                /* expectedCollectionFromMoreLessThanLimit= */  make_a <int> ( 1, 2, 4, 6, 7, 8, 9 ),
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               make_a <int> ( 1, 2, 4, 6, 8, 9 ),
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  make_a <int> ( 1, 4, 6, 7, 8, 9 ),
                /* expectedResultFromAll= */                    3U,
                /* expectedCollectionFromAll= */                make_a <int> ( 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */             3U,
                /* expectedCollectionFromAllAndMore= */         make_a <int> ( 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeAllOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllOf,
                /* noneCommon= */                       make_a <int> ( 10, 11, 12, 13),
                /* oneCommon= */                        make_a <int> ( 16, 6, 11, 12, 13),
                /* moreCommon= */                       make_a <int> ( 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_a <int> ( 9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_a <int> ( 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           0U,
                /* expectedCollectionFromNone= */       make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            1U,
                /* expectedCollectionFromOne= */        make_a <int> ( 1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           3U,
                /* expectedCollectionFromMore= */       make_a <int> ( 1, 2, 4, 6, 8, 9 ),
                /* expectedResultFromAll= */            9U,
                /* expectedCollectionFromAll= */        make_a <int> (),
                /* expectedResultFromAllAndMore= */     9U,
                /* expectedCollectionFromAllAndMore= */ make_a <int >()
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeFirstOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstOf,
                /* noneCommon= */                       make_a <int> ( 10, 11, 12, 13),
                /* oneCommon= */                        make_a <int> ( 16, 6, 11, 12, 13),
                /* moreCommon= */                       make_a <int> ( 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_a <int> ( 9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_a <int> ( 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_a <int> ( 1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_a <int> ( 1, 2, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        make_a <int> ( 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ make_a <int> ( 2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeLastOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastOf,
                /* noneCommon= */                       make_a <int> ( 10, 11, 12, 13),
                /* oneCommon= */                        make_a <int> ( 16, 6, 11, 12, 13),
                /* moreCommon= */                       make_a <int> ( 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_a <int> ( 9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_a <int> ( 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_a <int> ( 1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_a <int> ( 1, 2, 3, 4, 5, 6, 8, 9 ),
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8 ),
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8 )
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "Collection",
                /* subvariant= */                               "removeNotOf",
                /* subvariantOffset= */                         7,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeNotOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               make_a <int> ( 10, 11, 12, 13),
                /* oneCommon= */                                make_a <int> ( 16, 6, 11, 12, 13),
                /* moreLessThanLimitCommon= */                  make_a <int> ( 20, 123, 5, 1230, 435, 3, 1235, 9534),
                /* moreCommon= */                               make_a <int> ( 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* moreMoreThanLimitCommon= */                  make_a <int> ( 2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                                make_a <int> ( 9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                         make_a <int> ( 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */                   3U,
                /* expectedCollectionFromNone= */               make_a <int> ( 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */                    3U,
                /* expectedCollectionFromOne= */                make_a <int> ( 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMoreLessThanLimit= */      3U,
                /* expectedCollectionFromMoreLessThanLimit= */  make_a <int> ( 3, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               make_a <int> ( 3, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  make_a <int> ( 2, 3, 5, 7, 8, 9 ),
                /* expectedResultFromAll= */                    0U,
                /* expectedCollectionFromAll= */                make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */             0U,
                /* expectedCollectionFromAllAndMore= */         make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeAllNotOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllNotOf,
                /* noneCommon= */                       make_a <int> ( 10, 11, 12, 13),
                /* oneCommon= */                        make_a <int> ( 16, 6, 11, 12, 13),
                /* moreCommon= */                       make_a <int> ( 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_a <int> ( 9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_a <int> ( 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           9U,
                /* expectedCollectionFromNone= */       make_a <int> (),
                /* expectedResultFromOne= */            8U,
                /* expectedCollectionFromOne= */        make_a <int> ( 6 ),
                /* expectedResultFromMore= */           6U,
                /* expectedCollectionFromMore= */       make_a <int> ( 3, 5, 7 ),
                /* expectedResultFromAll= */            0U,
                /* expectedCollectionFromAll= */        make_a <int> ( 1 ,2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */     0U,
                /* expectedCollectionFromAllAndMore= */ make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeFirstNotOf",
                /* subvariantOffset= */                 10,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstNotOf,
                /* noneCommon= */                       make_a <int> ( 10, 11, 12, 13),
                /* oneCommon= */                        make_a <int> ( 16, 6, 11, 12, 13),
                /* moreCommon= */                       make_a <int> ( 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_a <int> ( 9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_a <int> ( 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       make_a <int> ( 2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_a <int> ( 2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_a <int> ( 2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9)
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeLastNotOf",
                /* subvariantOffset= */                 15,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastNotOf,
                /* noneCommon= */                       make_a <int> ( 10, 11, 12, 13),
                /* oneCommon= */                        make_a <int> ( 16, 6, 11, 12, 13),
                /* moreCommon= */                       make_a <int> ( 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_a <int> ( 9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_a <int> ( 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8),
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ make_a <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9)
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "InitializerList",
                /* subvariant= */                               "removeOf",
                /* subvariantOffset= */                         0,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               { 10, 11, 12, 13 },
                /* oneCommon= */                                { 16, 6, 11, 12, 13 },
                /* moreLessThanLimitCommon= */                  { 20, 123, 5, 1230, 435, 3, 1235, 9534 },
                /* moreCommon= */                               { 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245 },
                /* moreMoreThanLimitCommon= */                  { 2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245 },
                /* allCommon= */                                { 9, 2, 5, 1, 4, 3, 7, 8, 6  },
                /* allAndMoreCommon= */                         { 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6  },
                /* expectedResultFromNone= */                   0U,
                /* expectedCollectionFromNone= */               { 1, 2, 3, 4, 5, 6, 7, 8, 9  },
                /* expectedResultFromOne= */                    1U,
                /* expectedCollectionFromOne= */                { 1, 2, 3, 4, 5, 7, 8, 9  },
                /* expectedResultFromMoreLessThanLimit= */      2U,
                /* expectedCollectionFromMoreLessThanLimit= */  { 1, 2, 4, 6, 7, 8, 9  },
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               { 1, 2, 4, 6, 8, 9  },
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  { 1, 4, 6, 7, 8, 9  },
                /* expectedResultFromAll= */                    3U,
                /* expectedCollectionFromAll= */                { 4, 5, 6, 7, 8, 9  },
                /* expectedResultFromAllAndMore= */             3U,
                /* expectedCollectionFromAllAndMore= */         { 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeAllOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllOf,
                /* noneCommon= */                       { 10, 11, 12, 13  },
                /* oneCommon= */                        { 16, 6, 11, 12, 13  },
                /* moreCommon= */                       { 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245  },
                /* allCommon= */                        { 9, 2, 5, 1, 4, 3, 7, 8, 6   },
                /* allAndMoreCommon= */                 { 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6   },
                /* expectedResultFromNone= */           0U,
                /* expectedCollectionFromNone= */       { 1, 2, 3, 4, 5, 6, 7, 8, 9   },
                /* expectedResultFromOne= */            1U,
                /* expectedCollectionFromOne= */        { 1, 2, 3, 4, 5, 7, 8, 9   },
                /* expectedResultFromMore= */           3U,
                /* expectedCollectionFromMore= */       { 1, 2, 4, 6, 8, 9   },
                /* expectedResultFromAll= */            9U,
                /* expectedCollectionFromAll= */        {},
                /* expectedResultFromAllAndMore= */     9U,
                /* expectedCollectionFromAllAndMore= */ {}
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeFirstOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstOf,
                /* noneCommon= */                       { 10, 11, 12, 13 },
                /* oneCommon= */                        { 16, 6, 11, 12, 13 },
                /* moreCommon= */                       { 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245 },
                /* allCommon= */                        { 9, 2, 5, 1, 4, 3, 7, 8, 6  },
                /* allAndMoreCommon= */                 { 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6  },
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       { 1, 2, 3, 4, 5, 6, 7, 8, 9  },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        { 1, 2, 3, 4, 5, 7, 8, 9  },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       { 1, 2, 4, 5, 6, 7, 8, 9  },
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        { 2, 3, 4, 5, 6, 7, 8, 9  },
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ { 2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeLastOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {1, 2, 3, 4, 5, 6, 8, 9 },
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        {1, 2, 3, 4, 5, 6, 7, 8 },
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8 }
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "InitializerList",
                /* subvariant= */                               "removeNotOf",
                /* subvariantOffset= */                         7,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeNotOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               { 10, 11, 12, 13 },
                /* oneCommon= */                                { 16, 6, 11, 12, 13 },
                /* moreLessThanLimitCommon= */                  { 20, 123, 5, 1230, 435, 3, 1235, 9534 },
                /* moreCommon= */                               { 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245 },
                /* moreMoreThanLimitCommon= */                  { 2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245 },
                /* allCommon= */                                { 9, 2, 5, 1, 4, 3, 7, 8, 6  },
                /* allAndMoreCommon= */                         { 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6  },
                /* expectedResultFromNone= */                   3U,
                /* expectedCollectionFromNone= */               { 4, 5, 6, 7, 8, 9  },
                /* expectedResultFromOne= */                    3U,
                /* expectedCollectionFromOne= */                { 4, 5, 6, 7, 8, 9  },
                /* expectedResultFromMoreLessThanLimit= */      3U,
                /* expectedCollectionFromMoreLessThanLimit= */  { 3, 5, 6, 7, 8, 9  },
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               { 3, 5, 6, 7, 8, 9  },
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  { 2, 3, 5, 7, 8, 9  },
                /* expectedResultFromAll= */                    0U,
                /* expectedCollectionFromAll= */                { 1, 2, 3, 4, 5, 6, 7, 8, 9  },
                /* expectedResultFromAllAndMore= */             0U,
                /* expectedCollectionFromAllAndMore= */         { 1, 2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeAllNotOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllNotOf,
                /* noneCommon= */                       { 10, 11, 12, 13},
                /* oneCommon= */                        { 16, 6, 11, 12, 13},
                /* moreCommon= */                       { 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        { 9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 { 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           9U,
                /* expectedCollectionFromNone= */       {},
                /* expectedResultFromOne= */            8U,
                /* expectedCollectionFromOne= */        { 6 },
                /* expectedResultFromMore= */           6U,
                /* expectedCollectionFromMore= */       { 3, 5, 7 },
                /* expectedResultFromAll= */            0U,
                /* expectedCollectionFromAll= */        { 1 ,2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */     0U,
                /* expectedCollectionFromAllAndMore= */ { 1, 2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeFirstNotOf",
                /* subvariantOffset= */                 10,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstNotOf,
                /* noneCommon= */                       { 10, 11, 12, 13  },
                /* oneCommon= */                        { 16, 6, 11, 12, 13  },
                /* moreCommon= */                       { 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245  },
                /* allCommon= */                        { 9, 2, 5, 1, 4, 3, 7, 8, 6   },
                /* allAndMoreCommon= */                 { 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6   },
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       { 2, 3, 4, 5, 6, 7, 8, 9  },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        { 2, 3, 4, 5, 6, 7, 8, 9  },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       { 2, 3, 4, 5, 6, 7, 8, 9  },
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        { 1, 2, 3, 4, 5, 6, 7, 8, 9  },
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ { 1, 2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeLastNotOf",
                /* subvariantOffset= */                 15,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastNotOf,
                /* noneCommon= */                       { 10, 11, 12, 13 },
                /* oneCommon= */                        { 16, 6, 11, 12, 13 },
                /* moreCommon= */                       { 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245 },
                /* allCommon= */                        { 9, 2, 5, 1, 4, 3, 7, 8, 6  },
                /* allAndMoreCommon= */                 { 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6  },
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       { 1, 2, 3, 4, 5, 6, 7, 8  },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        { 1, 2, 3, 4, 5, 6, 7, 8 },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       { 1, 2, 3, 4, 5, 6, 7, 8 },
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        { 1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ { 1, 2, 3, 4, 5, 6, 7, 8, 9 }
        );

    });
    this->executeSubtest ( "CollectionTestGroup-RemoveOf-" __CDS_cpplang_core_version_name " : CTG-00450-RO-" __CDS_cpplang_core_version_name " : IntLinkedList", [this, & allOk]{

        cds :: LinkedList < int > underTest = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

        allOk = allOk && collectionTestGroupItemRemoveOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "Collection",
                /* subvariant= */                               "removeOf",
                /* subvariantOffset= */                         0,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               make_ll <int> ( 10, 11, 12, 13),
                /* oneCommon= */                                make_ll <int> ( 16, 6, 11, 12, 13),
                /* moreLessThanLimitCommon= */                  make_ll <int> ( 20, 123, 5, 1230, 435, 3, 1235, 9534),
                /* moreCommon= */                               make_ll <int> ( 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* moreMoreThanLimitCommon= */                  make_ll <int> ( 2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                                make_ll <int> ( 9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                         make_ll <int> ( 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */                   0U,
                /* expectedCollectionFromNone= */               make_ll <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */                    1U,
                /* expectedCollectionFromOne= */                make_ll <int> ( 1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMoreLessThanLimit= */      2U,
                /* expectedCollectionFromMoreLessThanLimit= */  make_ll <int> ( 1, 2, 4, 6, 7, 8, 9 ),
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               make_ll <int> ( 1, 2, 4, 6, 8, 9 ),
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  make_ll <int> ( 1, 4, 6, 7, 8, 9 ),
                /* expectedResultFromAll= */                    3U,
                /* expectedCollectionFromAll= */                make_ll <int> ( 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */             3U,
                /* expectedCollectionFromAllAndMore= */         make_ll <int> ( 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeAllOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllOf,
                /* noneCommon= */                       make_ll <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_ll <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_ll <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_ll <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_ll <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           0U,
                /* expectedCollectionFromNone= */       make_ll <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            1U,
                /* expectedCollectionFromOne= */        make_ll <int> ( 1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           3U,
                /* expectedCollectionFromMore= */       make_ll <int> ( 1, 2, 4, 6, 8, 9 ),
                /* expectedResultFromAll= */            9U,
                /* expectedCollectionFromAll= */        make_ll <int> (),
                /* expectedResultFromAllAndMore= */     9U,
                /* expectedCollectionFromAllAndMore= */ make_ll <int> ()
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeFirstOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstOf,
                /* noneCommon= */                       make_ll <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_ll <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_ll <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_ll <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_ll <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       make_ll <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_ll <int> (1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_ll <int> (1, 2, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        make_ll <int> (2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ make_ll <int> (2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeLastOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastOf,
                /* noneCommon= */                       make_ll <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_ll <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_ll <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_ll <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_ll <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       make_ll <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_ll <int> (1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_ll <int> (1, 2, 3, 4, 5, 6, 8, 9 ),
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        make_ll <int> (1, 2, 3, 4, 5, 6, 7, 8 ),
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ make_ll <int> (1, 2, 3, 4, 5, 6, 7, 8 )
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "Collection",
                /* subvariant= */                               "removeNotOf",
                /* subvariantOffset= */                         7,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeNotOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               make_ll <int> (10, 11, 12, 13),
                /* oneCommon= */                                make_ll <int> (16, 6, 11, 12, 13),
                /* moreLessThanLimitCommon= */                  make_ll <int> (20, 123, 5, 1230, 435, 3, 1235, 9534),
                /* moreCommon= */                               make_ll <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* moreMoreThanLimitCommon= */                  make_ll <int> (2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                                make_ll <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                         make_ll <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */                   3U,
                /* expectedCollectionFromNone= */               make_ll <int> (4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */                    3U,
                /* expectedCollectionFromOne= */                make_ll <int> (4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMoreLessThanLimit= */      3U,
                /* expectedCollectionFromMoreLessThanLimit= */  make_ll <int> (3, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               make_ll <int> (3, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  make_ll <int> (2, 3, 5, 7, 8, 9 ),
                /* expectedResultFromAll= */                    0U,
                /* expectedCollectionFromAll= */                make_ll <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */             0U,
                /* expectedCollectionFromAllAndMore= */         make_ll <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeAllNotOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllNotOf,
                /* noneCommon= */                       make_ll <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_ll <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_ll <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_ll <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_ll <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           9U,
                /* expectedCollectionFromNone= */       make_ll <int> (),
                /* expectedResultFromOne= */            8U,
                /* expectedCollectionFromOne= */        make_ll <int> (6 ),
                /* expectedResultFromMore= */           6U,
                /* expectedCollectionFromMore= */       make_ll <int> (3, 5, 7 ),
                /* expectedResultFromAll= */            0U,
                /* expectedCollectionFromAll= */        make_ll <int> (1 ,2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */     0U,
                /* expectedCollectionFromAllAndMore= */ make_ll <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeFirstNotOf",
                /* subvariantOffset= */                 10,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstNotOf,
                /* noneCommon= */                       make_ll <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_ll <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_ll <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_ll <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_ll <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       make_ll <int> (2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_ll <int> (2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_ll <int> (2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        make_ll <int> (1, 2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ make_ll <int> (1, 2, 3, 4, 5, 6, 7, 8, 9)
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeLastNotOf",
                /* subvariantOffset= */                 15,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastNotOf,
                /* noneCommon= */                       make_ll <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_ll <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_ll <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_ll <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_ll <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       make_ll <int> (1, 2, 3, 4, 5, 6, 7, 8 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_ll <int> (1, 2, 3, 4, 5, 6, 7, 8),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_ll <int> (1, 2, 3, 4, 5, 6, 7, 8),
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        make_ll <int> (1, 2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ make_ll <int> (1, 2, 3, 4, 5, 6, 7, 8, 9)
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "InitializerList",
                /* subvariant= */                               "removeOf",
                /* subvariantOffset= */                         0,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               {10, 11, 12, 13 },
                /* oneCommon= */                                {16, 6, 11, 12, 13 },
                /* moreLessThanLimitCommon= */                  {20, 123, 5, 1230, 435, 3, 1235, 9534 },
                /* moreCommon= */                               {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245 },
                /* moreMoreThanLimitCommon= */                  {2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245 },
                /* allCommon= */                                {9, 2, 5, 1, 4, 3, 7, 8, 6  },
                /* allAndMoreCommon= */                         {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6  },
                /* expectedResultFromNone= */                   0U,
                /* expectedCollectionFromNone= */               {1, 2, 3, 4, 5, 6, 7, 8, 9  },
                /* expectedResultFromOne= */                    1U,
                /* expectedCollectionFromOne= */                {1, 2, 3, 4, 5, 7, 8, 9  },
                /* expectedResultFromMoreLessThanLimit= */      2U,
                /* expectedCollectionFromMoreLessThanLimit= */  {1, 2, 4, 6, 7, 8, 9  },
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               {1, 2, 4, 6, 8, 9  },
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  {1, 4, 6, 7, 8, 9  },
                /* expectedResultFromAll= */                    3U,
                /* expectedCollectionFromAll= */                {4, 5, 6, 7, 8, 9  },
                /* expectedResultFromAllAndMore= */             3U,
                /* expectedCollectionFromAllAndMore= */         {4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeAllOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           0U,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */            1U,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMore= */           3U,
                /* expectedCollectionFromMore= */       {1, 2, 4, 6, 8, 9 },
                /* expectedResultFromAll= */            9U,
                /* expectedCollectionFromAll= */        {},
                /* expectedResultFromAllAndMore= */     9U,
                /* expectedCollectionFromAllAndMore= */ {}
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeFirstOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {1, 2, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        {2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ {2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeLastOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {1, 2, 3, 4, 5, 6, 8, 9 },
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        {1, 2, 3, 4, 5, 6, 7, 8 },
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8 }
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "InitializerList",
                /* subvariant= */                               "removeNotOf",
                /* subvariantOffset= */                         7,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeNotOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               {10, 11, 12, 13},
                /* oneCommon= */                                {16, 6, 11, 12, 13},
                /* moreLessThanLimitCommon= */                  {20, 123, 5, 1230, 435, 3, 1235, 9534},
                /* moreCommon= */                               {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* moreMoreThanLimitCommon= */                  {2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                                {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                         {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */                   3U,
                /* expectedCollectionFromNone= */               {4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */                    3U,
                /* expectedCollectionFromOne= */                {4, 5, 6, 7, 8, 9 },
                /* expectedResultFromMoreLessThanLimit= */      3U,
                /* expectedCollectionFromMoreLessThanLimit= */  {3, 5, 6, 7, 8, 9 },
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               {3, 5, 6, 7, 8, 9 },
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  {2, 3, 5, 7, 8, 9 },
                /* expectedResultFromAll= */                    0U,
                /* expectedCollectionFromAll= */                {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */             0U,
                /* expectedCollectionFromAllAndMore= */         {1, 2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeAllNotOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllNotOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           9U,
                /* expectedCollectionFromNone= */       {},
                /* expectedResultFromOne= */            8U,
                /* expectedCollectionFromOne= */        {6 },
                /* expectedResultFromMore= */           6U,
                /* expectedCollectionFromMore= */       {3, 5, 7 },
                /* expectedResultFromAll= */            0U,
                /* expectedCollectionFromAll= */        {1 ,2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */     0U,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeFirstNotOf",
                /* subvariantOffset= */                 10,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstNotOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       {2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8, 9}
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeLastNotOf",
                /* subvariantOffset= */                 15,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastNotOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8 },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 6, 7, 8},
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {1, 2, 3, 4, 5, 6, 7, 8},
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8, 9}
        );

    });
    this->executeSubtest ( "CollectionTestGroup-RemoveOf-" __CDS_cpplang_core_version_name " : CTG-00450-RO-" __CDS_cpplang_core_version_name " : IntHashSet", [this, & allOk]{

        cds :: HashSet < int > underTest = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

        allOk = allOk && collectionTestGroupItemRemoveOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "Collection",
                /* subvariant= */                               "removeOf",
                /* subvariantOffset= */                         0,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               make_hs <int> (10, 11, 12, 13),
                /* oneCommon= */                                make_hs <int> (16, 6, 11, 12, 13),
                /* moreLessThanLimitCommon= */                  make_hs <int> (20, 123, 5, 1230, 435, 3, 1235, 9534),
                /* moreCommon= */                               make_hs <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* moreMoreThanLimitCommon= */                  make_hs <int> (2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                                make_hs <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                         make_hs <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */                   0U,
                /* expectedCollectionFromNone= */               make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */                    1U,
                /* expectedCollectionFromOne= */                make_hs <int> (1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMoreLessThanLimit= */      2U,
                /* expectedCollectionFromMoreLessThanLimit= */  make_hs <int> (1, 2, 4, 6, 7, 8, 9 ),
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               make_hs <int> (1, 2, 4, 6, 8, 9 ),
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  make_hs <int> (1, 4, 6, 7, 8, 9 ),
                /* expectedResultFromAll= */                    3U,
                /* expectedCollectionFromAll= */                make_hs <int> (4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */             3U,
                /* expectedCollectionFromAllAndMore= */         make_hs <int> (4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeAllOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllOf,
                /* noneCommon= */                       make_hs <int> ( 10, 11, 12, 13),
                /* oneCommon= */                        make_hs <int> ( 16, 6, 11, 12, 13),
                /* moreCommon= */                       make_hs <int> ( 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_hs <int> ( 9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_hs <int> ( 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           0U,
                /* expectedCollectionFromNone= */       make_hs <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            1U,
                /* expectedCollectionFromOne= */        make_hs <int> ( 1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           3U,
                /* expectedCollectionFromMore= */       make_hs <int> ( 1, 2, 4, 6, 8, 9 ),
                /* expectedResultFromAll= */            9U,
                /* expectedCollectionFromAll= */        make_hs <int> (),
                /* expectedResultFromAllAndMore= */     9U,
                /* expectedCollectionFromAllAndMore= */ make_hs <int> ()
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeFirstOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstOf,
                /* noneCommon= */                       make_hs <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_hs <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_hs <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_hs <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_hs <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_hs <int> (1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_hs <int> (1, 2, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        make_hs <int> (2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ make_hs <int> (2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeLastOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastOf,
                /* noneCommon= */                       make_hs <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_hs <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_hs <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_hs <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_hs <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_hs <int> (1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_hs <int> (1, 2, 3, 4, 5, 6, 8, 9 ),
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8 ),
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8 )
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "Collection",
                /* subvariant= */                               "removeNotOf",
                /* subvariantOffset= */                         7,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeNotOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               make_hs <int> (10, 11, 12, 13),
                /* oneCommon= */                                make_hs <int> (16, 6, 11, 12, 13),
                /* moreLessThanLimitCommon= */                  make_hs <int> (20, 123, 5, 1230, 435, 3, 1235, 9534),
                /* moreCommon= */                               make_hs <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* moreMoreThanLimitCommon= */                  make_hs <int> (2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                                make_hs <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                         make_hs <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */                   3U,
                /* expectedCollectionFromNone= */               make_hs <int> (4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */                    3U,
                /* expectedCollectionFromOne= */                make_hs <int> (4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMoreLessThanLimit= */      3U,
                /* expectedCollectionFromMoreLessThanLimit= */  make_hs <int> (3, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               make_hs <int> (3, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  make_hs <int> (2, 3, 5, 7, 8, 9 ),
                /* expectedResultFromAll= */                    0U,
                /* expectedCollectionFromAll= */                make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */             0U,
                /* expectedCollectionFromAllAndMore= */         make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeAllNotOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllNotOf,
                /* noneCommon= */                       make_hs <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_hs <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_hs <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_hs <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_hs <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           9U,
                /* expectedCollectionFromNone= */       make_hs <int> (),
                /* expectedResultFromOne= */            8U,
                /* expectedCollectionFromOne= */        make_hs <int> (6 ),
                /* expectedResultFromMore= */           6U,
                /* expectedCollectionFromMore= */       make_hs <int> (3, 5, 7 ),
                /* expectedResultFromAll= */            0U,
                /* expectedCollectionFromAll= */        make_hs <int> (1 ,2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */     0U,
                /* expectedCollectionFromAllAndMore= */ make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeFirstNotOf",
                /* subvariantOffset= */                 10,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstNotOf,
                /* noneCommon= */                       make_hs <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_hs <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_hs <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_hs <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_hs <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       make_hs <int> (2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_hs <int> (2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_hs <int> (2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9)
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeLastNotOf",
                /* subvariantOffset= */                 15,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastNotOf,
                /* noneCommon= */                       make_hs <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_hs <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_hs <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_hs <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_hs <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8),
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ make_hs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9)
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "InitializerList",
                /* subvariant= */                               "removeOf",
                /* subvariantOffset= */                         0,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               {10, 11, 12, 13},
                /* oneCommon= */                                {16, 6, 11, 12, 13},
                /* moreLessThanLimitCommon= */                  {20, 123, 5, 1230, 435, 3, 1235, 9534},
                /* moreCommon= */                               {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* moreMoreThanLimitCommon= */                  {2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                                {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                         {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */                   0U,
                /* expectedCollectionFromNone= */               {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */                    1U,
                /* expectedCollectionFromOne= */                {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMoreLessThanLimit= */      2U,
                /* expectedCollectionFromMoreLessThanLimit= */  {1, 2, 4, 6, 7, 8, 9 },
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               {1, 2, 4, 6, 8, 9 },
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  {1, 4, 6, 7, 8, 9 },
                /* expectedResultFromAll= */                    3U,
                /* expectedCollectionFromAll= */                {4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */             3U,
                /* expectedCollectionFromAllAndMore= */         {4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeAllOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           0U,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */            1U,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMore= */           3U,
                /* expectedCollectionFromMore= */       {1, 2, 4, 6, 8, 9 },
                /* expectedResultFromAll= */            9U,
                /* expectedCollectionFromAll= */        {},
                /* expectedResultFromAllAndMore= */     9U,
                /* expectedCollectionFromAllAndMore= */ {}
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeFirstOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {1, 2, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        {2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ {2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeLastOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {1, 2, 3, 4, 5, 6, 8, 9 },
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        {1, 2, 3, 4, 5, 6, 7, 8 },
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8 }
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "InitializerList",
                /* subvariant= */                               "removeNotOf",
                /* subvariantOffset= */                         7,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeNotOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               {10, 11, 12, 13},
                /* oneCommon= */                                {16, 6, 11, 12, 13},
                /* moreLessThanLimitCommon= */                  {20, 123, 5, 1230, 435, 3, 1235, 9534},
                /* moreCommon= */                               {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* moreMoreThanLimitCommon= */                  {2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                                {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                         {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */                   3U,
                /* expectedCollectionFromNone= */               {4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */                    3U,
                /* expectedCollectionFromOne= */                {4, 5, 6, 7, 8, 9 },
                /* expectedResultFromMoreLessThanLimit= */      3U,
                /* expectedCollectionFromMoreLessThanLimit= */  {3, 5, 6, 7, 8, 9 },
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               {3, 5, 6, 7, 8, 9 },
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  {2, 3, 5, 7, 8, 9 },
                /* expectedResultFromAll= */                    0U,
                /* expectedCollectionFromAll= */                {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */             0U,
                /* expectedCollectionFromAllAndMore= */         {1, 2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeAllNotOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllNotOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           9U,
                /* expectedCollectionFromNone= */       {},
                /* expectedResultFromOne= */            8U,
                /* expectedCollectionFromOne= */        {6 },
                /* expectedResultFromMore= */           6U,
                /* expectedCollectionFromMore= */       {3, 5, 7 },
                /* expectedResultFromAll= */            0U,
                /* expectedCollectionFromAll= */        {1 ,2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */     0U,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeFirstNotOf",
                /* subvariantOffset= */                 10,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstNotOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       {2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8, 9}
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeLastNotOf",
                /* subvariantOffset= */                 15,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastNotOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8 },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 6, 7, 8},
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {1, 2, 3, 4, 5, 6, 7, 8},
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8, 9}
        );

    });
    this->executeSubtest ( "CollectionTestGroup-RemoveOf-" __CDS_cpplang_core_version_name " : CTG-00450-RO-" __CDS_cpplang_core_version_name " : IntTreeSet", [this, & allOk]{

        cds :: TreeSet < int > underTest = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

        allOk = allOk && collectionTestGroupItemRemoveOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "Collection",
                /* subvariant= */                               "removeOf",
                /* subvariantOffset= */                         0,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               make_ts <int> (10, 11, 12, 13),
                /* oneCommon= */                                make_ts <int> (16, 6, 11, 12, 13),
                /* moreLessThanLimitCommon= */                  make_ts <int> (20, 123, 5, 1230, 435, 3, 1235, 9534),
                /* moreCommon= */                               make_ts <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* moreMoreThanLimitCommon= */                  make_ts <int> (2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                                make_ts <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                         make_ts <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */                   0U,
                /* expectedCollectionFromNone= */               make_ts <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */                    1U,
                /* expectedCollectionFromOne= */                make_ts <int> (1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMoreLessThanLimit= */      2U,
                /* expectedCollectionFromMoreLessThanLimit= */  make_ts <int> (1, 2, 4, 6, 7, 8, 9 ),
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               make_ts <int> (1, 2, 4, 6, 8, 9 ),
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  make_ts <int> (1, 4, 6, 7, 8, 9 ),
                /* expectedResultFromAll= */                    3U,
                /* expectedCollectionFromAll= */                make_ts <int> (4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */             3U,
                /* expectedCollectionFromAllAndMore= */         make_ts <int> (4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeAllOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllOf,
                /* noneCommon= */                       make_ts <int> ( 10, 11, 12, 13),
                /* oneCommon= */                        make_ts <int> ( 16, 6, 11, 12, 13),
                /* moreCommon= */                       make_ts <int> ( 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_ts <int> ( 9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_ts <int> ( 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           0U,
                /* expectedCollectionFromNone= */       make_ts <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            1U,
                /* expectedCollectionFromOne= */        make_ts <int> ( 1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           3U,
                /* expectedCollectionFromMore= */       make_ts <int> ( 1, 2, 4, 6, 8, 9 ),
                /* expectedResultFromAll= */            9U,
                /* expectedCollectionFromAll= */        make_ts <int> (),
                /* expectedResultFromAllAndMore= */     9U,
                /* expectedCollectionFromAllAndMore= */ make_ts <int> ()
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeFirstOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstOf,
                /* noneCommon= */                       make_ts <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_ts <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_ts <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_ts <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_ts <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       make_ts <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_ts <int> (1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_ts <int> (1, 2, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        make_ts <int> (2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ make_ts <int> (2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeLastOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastOf,
                /* noneCommon= */                       make_ts <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_ts <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_ts <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_ts <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_ts <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       make_ts <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_ts <int> (1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_ts <int> (1, 2, 3, 4, 5, 6, 8, 9 ),
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        make_ts <int> (1, 2, 3, 4, 5, 6, 7, 8 ),
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ make_ts <int> (1, 2, 3, 4, 5, 6, 7, 8 )
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "Collection",
                /* subvariant= */                               "removeNotOf",
                /* subvariantOffset= */                         7,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeNotOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               make_ts <int> (10, 11, 12, 13),
                /* oneCommon= */                                make_ts <int> (16, 6, 11, 12, 13),
                /* moreLessThanLimitCommon= */                  make_ts <int> (20, 123, 5, 1230, 435, 3, 1235, 9534),
                /* moreCommon= */                               make_ts <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* moreMoreThanLimitCommon= */                  make_ts <int> (2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                                make_ts <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                         make_ts <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */                   3U,
                /* expectedCollectionFromNone= */               make_ts <int> (4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */                    3U,
                /* expectedCollectionFromOne= */                make_ts <int> (4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMoreLessThanLimit= */      3U,
                /* expectedCollectionFromMoreLessThanLimit= */  make_ts <int> (3, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               make_ts <int> (3, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  make_ts <int> (2, 3, 5, 7, 8, 9 ),
                /* expectedResultFromAll= */                    0U,
                /* expectedCollectionFromAll= */                make_ts <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */             0U,
                /* expectedCollectionFromAllAndMore= */         make_ts <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeAllNotOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllNotOf,
                /* noneCommon= */                       make_ts <int> ( 10, 11, 12, 13),
                /* oneCommon= */                        make_ts <int> ( 16, 6, 11, 12, 13),
                /* moreCommon= */                       make_ts <int> ( 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_ts <int> ( 9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_ts <int> ( 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           9U,
                /* expectedCollectionFromNone= */       make_ts <int> (),
                /* expectedResultFromOne= */            8U,
                /* expectedCollectionFromOne= */        make_ts <int> ( 6 ),
                /* expectedResultFromMore= */           6U,
                /* expectedCollectionFromMore= */       make_ts <int> ( 3, 5, 7 ),
                /* expectedResultFromAll= */            0U,
                /* expectedCollectionFromAll= */        make_ts <int> ( 1 ,2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */     0U,
                /* expectedCollectionFromAllAndMore= */ make_ts <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeFirstNotOf",
                /* subvariantOffset= */                 10,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstNotOf,
                /* noneCommon= */                       make_ts <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_ts <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_ts <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_ts <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_ts <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       make_ts <int> (2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_ts <int> (2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_ts <int> (2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        make_ts <int> (1, 2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ make_ts <int> (1, 2, 3, 4, 5, 6, 7, 8, 9)
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeLastNotOf",
                /* subvariantOffset= */                 15,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastNotOf,
                /* noneCommon= */                       make_ts <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_ts <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_ts <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_ts <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_ts <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       make_ts <int> (1, 2, 3, 4, 5, 6, 7, 8 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_ts <int> (1, 2, 3, 4, 5, 6, 7, 8),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_ts <int> (1, 2, 3, 4, 5, 6, 7, 8),
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        make_ts <int> (1, 2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ make_ts <int> (1, 2, 3, 4, 5, 6, 7, 8, 9)
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "InitializerList",
                /* subvariant= */                               "removeOf",
                /* subvariantOffset= */                         0,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               {10, 11, 12, 13},
                /* oneCommon= */                                {16, 6, 11, 12, 13},
                /* moreLessThanLimitCommon= */                  {20, 123, 5, 1230, 435, 3, 1235, 9534},
                /* moreCommon= */                               {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* moreMoreThanLimitCommon= */                  {2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                                {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                         {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */                   0U,
                /* expectedCollectionFromNone= */               {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */                    1U,
                /* expectedCollectionFromOne= */                {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMoreLessThanLimit= */      2U,
                /* expectedCollectionFromMoreLessThanLimit= */  {1, 2, 4, 6, 7, 8, 9 },
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               {1, 2, 4, 6, 8, 9 },
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  {1, 4, 6, 7, 8, 9 },
                /* expectedResultFromAll= */                    3U,
                /* expectedCollectionFromAll= */                {4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */             3U,
                /* expectedCollectionFromAllAndMore= */         {4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeAllOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           0U,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */            1U,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMore= */           3U,
                /* expectedCollectionFromMore= */       {1, 2, 4, 6, 8, 9 },
                /* expectedResultFromAll= */            9U,
                /* expectedCollectionFromAll= */        {},
                /* expectedResultFromAllAndMore= */     9U,
                /* expectedCollectionFromAllAndMore= */ {}
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeFirstOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {1, 2, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        {2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ {2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeLastOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {1, 2, 3, 4, 5, 6, 8, 9 },
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        {1, 2, 3, 4, 5, 6, 7, 8 },
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8 }
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "InitializerList",
                /* subvariant= */                               "removeNotOf",
                /* subvariantOffset= */                         7,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeNotOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               {10, 11, 12, 13},
                /* oneCommon= */                                {16, 6, 11, 12, 13},
                /* moreLessThanLimitCommon= */                  {20, 123, 5, 1230, 435, 3, 1235, 9534},
                /* moreCommon= */                               {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* moreMoreThanLimitCommon= */                  {2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                                {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                         {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */                   3U,
                /* expectedCollectionFromNone= */               {4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */                    3U,
                /* expectedCollectionFromOne= */                {4, 5, 6, 7, 8, 9 },
                /* expectedResultFromMoreLessThanLimit= */      3U,
                /* expectedCollectionFromMoreLessThanLimit= */  {3, 5, 6, 7, 8, 9 },
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               {3, 5, 6, 7, 8, 9 },
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  {2, 3, 5, 7, 8, 9 },
                /* expectedResultFromAll= */                    0U,
                /* expectedCollectionFromAll= */                {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */             0U,
                /* expectedCollectionFromAllAndMore= */         {1, 2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeAllNotOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllNotOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           9U,
                /* expectedCollectionFromNone= */       {},
                /* expectedResultFromOne= */            8U,
                /* expectedCollectionFromOne= */        {6 },
                /* expectedResultFromMore= */           6U,
                /* expectedCollectionFromMore= */       {3, 5, 7 },
                /* expectedResultFromAll= */            0U,
                /* expectedCollectionFromAll= */        {1 ,2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */     0U,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeFirstNotOf",
                /* subvariantOffset= */                 10,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstNotOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       {2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8, 9}
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeLastNotOf",
                /* subvariantOffset= */                 15,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastNotOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8 },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 6, 7, 8},
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {1, 2, 3, 4, 5, 6, 7, 8},
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8, 9}
        );

    });
    this->executeSubtest ( "CollectionTestGroup-RemoveOf-" __CDS_cpplang_core_version_name " : CTG-00450-RO-" __CDS_cpplang_core_version_name " : IntLinkedHashSet", [this, & allOk]{

        cds :: LinkedHashSet < int > underTest = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

        allOk = allOk && collectionTestGroupItemRemoveOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "Collection",
                /* subvariant= */                               "removeOf",
                /* subvariantOffset= */                         0,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               make_lhs <int> (10, 11, 12, 13),
                /* oneCommon= */                                make_lhs <int> (16, 6, 11, 12, 13),
                /* moreLessThanLimitCommon= */                  make_lhs <int> (20, 123, 5, 1230, 435, 3, 1235, 9534),
                /* moreCommon= */                               make_lhs <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* moreMoreThanLimitCommon= */                  make_lhs <int> (2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                                make_lhs <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                         make_lhs <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */                   0U,
                /* expectedCollectionFromNone= */               make_lhs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */                    1U,
                /* expectedCollectionFromOne= */                make_lhs <int> (1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMoreLessThanLimit= */      2U,
                /* expectedCollectionFromMoreLessThanLimit= */  make_lhs <int> (1, 2, 4, 6, 7, 8, 9 ),
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               make_lhs <int> (1, 2, 4, 6, 8, 9 ),
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  make_lhs <int> (1, 4, 6, 7, 8, 9 ),
                /* expectedResultFromAll= */                    3U,
                /* expectedCollectionFromAll= */                make_lhs <int> (4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */             3U,
                /* expectedCollectionFromAllAndMore= */         make_lhs <int> (4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeAllOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllOf,
                /* noneCommon= */                       make_lhs <int> ( 10, 11, 12, 13),
                /* oneCommon= */                        make_lhs <int> ( 16, 6, 11, 12, 13),
                /* moreCommon= */                       make_lhs <int> ( 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_lhs <int> ( 9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_lhs <int> ( 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           0U,
                /* expectedCollectionFromNone= */       make_lhs <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            1U,
                /* expectedCollectionFromOne= */        make_lhs <int> ( 1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           3U,
                /* expectedCollectionFromMore= */       make_lhs <int> ( 1, 2, 4, 6, 8, 9 ),
                /* expectedResultFromAll= */            9U,
                /* expectedCollectionFromAll= */        make_lhs <int> (),
                /* expectedResultFromAllAndMore= */     9U,
                /* expectedCollectionFromAllAndMore= */ make_lhs <int> ()
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeFirstOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstOf,
                /* noneCommon= */                       make_lhs <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_lhs <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_lhs <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_lhs <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_lhs <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       make_lhs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_lhs <int> (1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_lhs <int> (1, 2, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        make_lhs <int> (2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ make_lhs <int> (2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeLastOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastOf,
                /* noneCommon= */                       make_lhs <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_lhs <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_lhs <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_lhs <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_lhs <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       make_lhs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_lhs <int> (1, 2, 3, 4, 5, 7, 8, 9 ),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_lhs <int> (1, 2, 3, 4, 5, 6, 8, 9 ),
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        make_lhs <int> (1, 2, 3, 4, 5, 6, 7, 8 ),
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ make_lhs <int> (1, 2, 3, 4, 5, 6, 7, 8 )
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "Collection",
                /* subvariant= */                               "removeNotOf",
                /* subvariantOffset= */                         7,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeNotOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               make_lhs <int> (10, 11, 12, 13),
                /* oneCommon= */                                make_lhs <int> (16, 6, 11, 12, 13),
                /* moreLessThanLimitCommon= */                  make_lhs <int> (20, 123, 5, 1230, 435, 3, 1235, 9534),
                /* moreCommon= */                               make_lhs <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* moreMoreThanLimitCommon= */                  make_lhs <int> (2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                                make_lhs <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                         make_lhs <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */                   3U,
                /* expectedCollectionFromNone= */               make_lhs <int> (4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromOne= */                    3U,
                /* expectedCollectionFromOne= */                make_lhs <int> (4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMoreLessThanLimit= */      3U,
                /* expectedCollectionFromMoreLessThanLimit= */  make_lhs <int> (3, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               make_lhs <int> (3, 5, 6, 7, 8, 9 ),
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  make_lhs <int> (2, 3, 5, 7, 8, 9 ),
                /* expectedResultFromAll= */                    0U,
                /* expectedCollectionFromAll= */                make_lhs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */             0U,
                /* expectedCollectionFromAllAndMore= */         make_lhs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeAllNotOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllNotOf,
                /* noneCommon= */                       make_lhs <int> ( 10, 11, 12, 13),
                /* oneCommon= */                        make_lhs <int> ( 16, 6, 11, 12, 13),
                /* moreCommon= */                       make_lhs <int> ( 20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_lhs <int> ( 9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_lhs <int> ( 91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           9U,
                /* expectedCollectionFromNone= */       make_lhs <int> (),
                /* expectedResultFromOne= */            8U,
                /* expectedCollectionFromOne= */        make_lhs <int> ( 6 ),
                /* expectedResultFromMore= */           6U,
                /* expectedCollectionFromMore= */       make_lhs <int> ( 3, 5, 7 ),
                /* expectedResultFromAll= */            0U,
                /* expectedCollectionFromAll= */        make_lhs <int> ( 1 ,2, 3, 4, 5, 6, 7, 8, 9 ),
                /* expectedResultFromAllAndMore= */     0U,
                /* expectedCollectionFromAllAndMore= */ make_lhs <int> ( 1, 2, 3, 4, 5, 6, 7, 8, 9 )
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeFirstNotOf",
                /* subvariantOffset= */                 10,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstNotOf,
                /* noneCommon= */                       make_lhs <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_lhs <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_lhs <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_lhs <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_lhs <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       make_lhs <int> (2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_lhs <int> (2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_lhs <int> (2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        make_lhs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ make_lhs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9)
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeLastNotOf",
                /* subvariantOffset= */                 15,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastNotOf,
                /* noneCommon= */                       make_lhs <int> (10, 11, 12, 13),
                /* oneCommon= */                        make_lhs <int> (16, 6, 11, 12, 13),
                /* moreCommon= */                       make_lhs <int> (20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245),
                /* allCommon= */                        make_lhs <int> (9, 2, 5, 1, 4, 3, 7, 8, 6 ),
                /* allAndMoreCommon= */                 make_lhs <int> (91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 ),
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       make_lhs <int> (1, 2, 3, 4, 5, 6, 7, 8 ),
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        make_lhs <int> (1, 2, 3, 4, 5, 6, 7, 8),
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       make_lhs <int> (1, 2, 3, 4, 5, 6, 7, 8),
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        make_lhs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9),
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ make_lhs <int> (1, 2, 3, 4, 5, 6, 7, 8, 9)
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "InitializerList",
                /* subvariant= */                               "removeOf",
                /* subvariantOffset= */                         0,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               {10, 11, 12, 13},
                /* oneCommon= */                                {16, 6, 11, 12, 13},
                /* moreLessThanLimitCommon= */                  {20, 123, 5, 1230, 435, 3, 1235, 9534},
                /* moreCommon= */                               {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* moreMoreThanLimitCommon= */                  {2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                                {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                         {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */                   0U,
                /* expectedCollectionFromNone= */               {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */                    1U,
                /* expectedCollectionFromOne= */                {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMoreLessThanLimit= */      2U,
                /* expectedCollectionFromMoreLessThanLimit= */  {1, 2, 4, 6, 7, 8, 9 },
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               {1, 2, 4, 6, 8, 9 },
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  {1, 4, 6, 7, 8, 9 },
                /* expectedResultFromAll= */                    3U,
                /* expectedCollectionFromAll= */                {4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */             3U,
                /* expectedCollectionFromAllAndMore= */         {4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeAllOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           0U,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */            1U,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMore= */           3U,
                /* expectedCollectionFromMore= */       {1, 2, 4, 6, 8, 9 },
                /* expectedResultFromAll= */            9U,
                /* expectedCollectionFromAll= */        {},
                /* expectedResultFromAllAndMore= */     9U,
                /* expectedCollectionFromAllAndMore= */ {}
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeFirstOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {1, 2, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        {2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ {2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeLastOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 7, 8, 9 },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {1, 2, 3, 4, 5, 6, 8, 9 },
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        {1, 2, 3, 4, 5, 6, 7, 8 },
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8 }
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "InitializerList",
                /* subvariant= */                               "removeNotOf",
                /* subvariantOffset= */                         7,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < int > :: removeNotOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               {10, 11, 12, 13},
                /* oneCommon= */                                {16, 6, 11, 12, 13},
                /* moreLessThanLimitCommon= */                  {20, 123, 5, 1230, 435, 3, 1235, 9534},
                /* moreCommon= */                               {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* moreMoreThanLimitCommon= */                  {2, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                                {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                         {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */                   3U,
                /* expectedCollectionFromNone= */               {4, 5, 6, 7, 8, 9 },
                /* expectedResultFromOne= */                    3U,
                /* expectedCollectionFromOne= */                {4, 5, 6, 7, 8, 9 },
                /* expectedResultFromMoreLessThanLimit= */      3U,
                /* expectedCollectionFromMoreLessThanLimit= */  {3, 5, 6, 7, 8, 9 },
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               {3, 5, 6, 7, 8, 9 },
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  {2, 3, 5, 7, 8, 9 },
                /* expectedResultFromAll= */                    0U,
                /* expectedCollectionFromAll= */                {1, 2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */             0U,
                /* expectedCollectionFromAllAndMore= */         {1, 2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeAllNotOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < int > :: removeAllNotOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           9U,
                /* expectedCollectionFromNone= */       {},
                /* expectedResultFromOne= */            8U,
                /* expectedCollectionFromOne= */        {6 },
                /* expectedResultFromMore= */           6U,
                /* expectedCollectionFromMore= */       {3, 5, 7 },
                /* expectedResultFromAll= */            0U,
                /* expectedCollectionFromAll= */        {1 ,2, 3, 4, 5, 6, 7, 8, 9 },
                /* expectedResultFromAllAndMore= */     0U,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8, 9 }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeFirstNotOf",
                /* subvariantOffset= */                 10,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeFirstNotOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       {2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8, 9}
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < int >, decltype (underTest), int > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeLastNotOf",
                /* subvariantOffset= */                 15,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < int > :: removeLastNotOf,
                /* noneCommon= */                       {10, 11, 12, 13},
                /* oneCommon= */                        {16, 6, 11, 12, 13},
                /* moreCommon= */                       {20, 123, 5, 1230, 435, 3, 7, 1235, 9534, 1245},
                /* allCommon= */                        {9, 2, 5, 1, 4, 3, 7, 8, 6 },
                /* allAndMoreCommon= */                 {91245, 9, 2, 5532, 5, 1, 4, 647, 1324, 3, 7, 45, 234, 2365, 2436, 56, 8, 6 },
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       {1, 2, 3, 4, 5, 6, 7, 8 },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {1, 2, 3, 4, 5, 6, 7, 8},
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {1, 2, 3, 4, 5, 6, 7, 8},
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        {1, 2, 3, 4, 5, 6, 7, 8, 9},
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ {1, 2, 3, 4, 5, 6, 7, 8, 9}
        );

    });
    this->executeSubtest ( "CollectionTestGroup-RemoveOf-" __CDS_cpplang_core_version_name " : CTG-00450-RO-" __CDS_cpplang_core_version_name " : IntToIntHashMap", [this, & allOk]{

        cds :: HashMap < int, int > underTest = { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} };

        allOk = allOk && collectionTestGroupItemRemoveOf < cds :: Iterable < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "Collection",
                /* subvariant= */                               "removeOf",
                /* subvariantOffset= */                         0,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < MapEntry < int, int > > :: removeOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               cds::HashMap <int, int> { {10, 10}, {11, 11}, {12, 12}, {13, 13} },
                /* oneCommon= */                                cds::HashMap <int, int> { {16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13} },
                /* moreLessThanLimitCommon= */                  cds::HashMap <int, int> { {20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {1235, 1235}, {9534, 9534} },
                /* moreCommon= */                               cds::HashMap <int, int> { {20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245} },
                /* moreMoreThanLimitCommon= */                  cds::HashMap <int, int> { {2, 2}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245} },
                /* allCommon= */                                cds::HashMap <int, int> { {9, 9}, {2, 2}, {5, 5}, {1, 1} , {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6}  },
                /* allAndMoreCommon= */                         cds::HashMap <int, int> { {91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6}  },
                /* expectedResultFromNone= */                   0U,
                /* expectedCollectionFromNone= */               cds::HashMap <int, int> { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}  },
                /* expectedResultFromOne= */                    1U,
                /* expectedCollectionFromOne= */                cds::HashMap <int, int> { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9}  },
                /* expectedResultFromMoreLessThanLimit= */      2U,
                /* expectedCollectionFromMoreLessThanLimit= */  cds::HashMap <int, int> { {1, 1}, {2, 2}, {4, 4}, {6, 6}, {7, 7}, {8, 8}, {9, 9}  },
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               cds::HashMap <int, int> { {1, 1}, {2, 2}, {4, 4}, {6, 6}, {8, 8}, {9, 9}  },
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  cds::HashMap <int, int> { {1, 1}, {4, 4}, {6, 6}, {7, 7}, {8, 8}, {9, 9}  },
                /* expectedResultFromAll= */                    3U,
                /* expectedCollectionFromAll= */                cds::HashMap <int, int> { {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}  },
                /* expectedResultFromAllAndMore= */             3U,
                /* expectedCollectionFromAllAndMore= */         cds::HashMap <int, int> {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} }
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < cds :: Iterable < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeAllOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < MapEntry < int, int > > :: removeAllOf,
                /* noneCommon= */                       cds::HashMap <int, int> { {10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                        cds::HashMap <int, int> { {16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreCommon= */                       cds::HashMap <int, int> { {20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                        cds::HashMap <int, int> { {9, 9}, {2, 2}, {5, 5}, {1, 1}, {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                 cds::HashMap <int, int> { {91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */           0U,
                /* expectedCollectionFromNone= */       cds::HashMap <int, int> { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromOne= */            1U,
                /* expectedCollectionFromOne= */        cds::HashMap <int, int> { {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromMore= */           3U,
                /* expectedCollectionFromMore= */       cds::HashMap <int, int> { {1, 1}, {2, 2}, {4, 4}, {6, 6}, {8, 8}, {9, 9} },
                /* expectedResultFromAll= */            9U,
                /* expectedCollectionFromAll= */        cds::HashMap <int, int> (),
                /* expectedResultFromAllAndMore= */     9U,
                /* expectedCollectionFromAllAndMore= */ cds::HashMap <int, int> ()
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeFirstOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < MapEntry < int, int > > :: removeFirstOf,
                /* noneCommon= */                       cds::HashMap <int, int> {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                        cds::HashMap <int, int> {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreCommon= */                       cds::HashMap <int, int> {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                        cds::HashMap <int, int> {{9, 9}, {2, 2}, {5, 5}, {1, 1}, {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                 cds::HashMap <int, int> {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       cds::HashMap <int, int> {{1, 1}, {2, 2}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        cds::HashMap <int, int> {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ cds::HashMap <int, int> {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeLastOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < MapEntry < int, int > > :: removeLastOf,
                /* noneCommon= */                       cds::HashMap <int, int> {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                        cds::HashMap <int, int> {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreCommon= */                       cds::HashMap <int, int> {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                        cds::HashMap <int, int> {{9, 9}, {2, 2}, {5, 5}, {1, 1}, {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                 cds::HashMap <int, int> {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {8, 8}, {9, 9} },
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8} },
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}}
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < cds :: Iterable < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "Collection",
                /* subvariant= */                               "removeNotOf",
                /* subvariantOffset= */                         7,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < MapEntry < int, int > > :: removeNotOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               cds::HashMap <int, int> {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                                cds::HashMap <int, int> {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreLessThanLimitCommon= */                  cds::HashMap <int, int> {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {1235, 1235}, {9534, 9534}},
                /* moreCommon= */                               cds::HashMap <int, int> {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* moreMoreThanLimitCommon= */                  cds::HashMap <int, int> {{2, 2}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                                cds::HashMap <int, int> {{9, 9}, {2, 2}, {5, 5}, {1, 1} , {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                         cds::HashMap <int, int> {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */                   3U,
                /* expectedCollectionFromNone= */               cds::HashMap <int, int> {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromOne= */                    3U,
                /* expectedCollectionFromOne= */                cds::HashMap <int, int> {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromMoreLessThanLimit= */      3U,
                /* expectedCollectionFromMoreLessThanLimit= */  cds::HashMap <int, int> {{3, 3}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               cds::HashMap <int, int> {{3, 3}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  cds::HashMap <int, int> {{2, 2}, {3, 3}, {5, 5}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromAll= */                    0U,
                /* expectedCollectionFromAll= */                cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromAllAndMore= */             0U,
                /* expectedCollectionFromAllAndMore= */         cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}}
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < cds :: Iterable < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeAllNotOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < MapEntry < int, int > > :: removeAllNotOf,
                /* noneCommon= */                       cds::HashMap <int, int> {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                        cds::HashMap <int, int> {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreCommon= */                       cds::HashMap <int, int> {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                        cds::HashMap <int, int> {{9, 9}, {2, 2}, {5, 5}, {1, 1}, {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                 cds::HashMap <int, int> {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */           9U,
                /* expectedCollectionFromNone= */       cds::HashMap <int, int> (),
                /* expectedResultFromOne= */            8U,
                /* expectedCollectionFromOne= */        cds::HashMap <int, int> {{6, 6} },
                /* expectedResultFromMore= */           6U,
                /* expectedCollectionFromMore= */       cds::HashMap <int, int> {{3, 3}, {5, 5}, {7, 7} },
                /* expectedResultFromAll= */            0U,
                /* expectedCollectionFromAll= */        cds::HashMap <int, int> {{1, 1} ,{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromAllAndMore= */     0U,
                /* expectedCollectionFromAllAndMore= */ cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeFirstNotOf",
                /* subvariantOffset= */                 10,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < MapEntry < int, int > > :: removeFirstNotOf,
                /* noneCommon= */                       cds::HashMap <int, int> {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                        cds::HashMap <int, int> {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreCommon= */                       cds::HashMap <int, int> {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                        cds::HashMap <int, int> {{9, 9}, {2, 2}, {5, 5}, {1, 1}, {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                 cds::HashMap <int, int> {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       cds::HashMap <int, int> {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        cds::HashMap <int, int> {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       cds::HashMap <int, int> {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}}
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < cds :: Iterable < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "Collection",
                /* subvariant= */                       "removeLastNotOf",
                /* subvariantOffset= */                 15,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < MapEntry < int, int > > :: removeLastNotOf,
                /* noneCommon= */                       cds::HashMap <int, int> {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                        cds::HashMap <int, int> {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreCommon= */                       cds::HashMap <int, int> {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                        cds::HashMap <int, int> {{9, 9}, {2, 2}, {5, 5}, {1, 1}, {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                 cds::HashMap <int, int> {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8} },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}},
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}},
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ cds::HashMap <int, int> {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}}
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < std :: initializer_list < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "InitializerList",
                /* subvariant= */                               "removeOf",
                /* subvariantOffset= */                         0,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < MapEntry < int, int > > :: removeOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                                {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreLessThanLimitCommon= */                  {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {1235, 1235}, {9534, 9534}},
                /* moreCommon= */                               {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* moreMoreThanLimitCommon= */                  {{2, 2}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                                {{9, 9}, {2, 2}, {5, 5}, {1, 1} , {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                         {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */                   0U,
                /* expectedCollectionFromNone= */               {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromOne= */                    1U,
                /* expectedCollectionFromOne= */                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromMoreLessThanLimit= */      2U,
                /* expectedCollectionFromMoreLessThanLimit= */  {{1, 1}, {2, 2}, {4, 4}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               {{1, 1}, {2, 2}, {4, 4}, {6, 6}, {8, 8}, {9, 9} },
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  {{1, 1}, {4, 4}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromAll= */                    3U,
                /* expectedCollectionFromAll= */                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromAllAndMore= */             3U,
                /* expectedCollectionFromAllAndMore= */         {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} }
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < std :: initializer_list < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeAllOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < MapEntry < int, int > > :: removeAllOf,
                /* noneCommon= */                       {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                        {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreCommon= */                       {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                        {{9, 9}, {2, 2}, {5, 5}, {1, 1}, {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                 {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */           0U,
                /* expectedCollectionFromNone= */       {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromOne= */            1U,
                /* expectedCollectionFromOne= */        {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromMore= */           3U,
                /* expectedCollectionFromMore= */       {{1, 1}, {2, 2}, {4, 4}, {6, 6}, {8, 8}, {9, 9} },
                /* expectedResultFromAll= */            9U,
                /* expectedCollectionFromAll= */        {},
                /* expectedResultFromAllAndMore= */     9U,
                /* expectedCollectionFromAllAndMore= */ {}
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeFirstOf",
                /* subvariantOffset= */                 0,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < MapEntry < int, int > > :: removeFirstOf,
                /* noneCommon= */                       {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                        {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreCommon= */                       {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                        {{9, 9}, {2, 2}, {5, 5}, {1, 1}, {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                 {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {{1, 1}, {2, 2}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeLastOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < MapEntry < int, int > > :: removeLastOf,
                /* noneCommon= */                       {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                        {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreCommon= */                       {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                        {{9, 9}, {2, 2}, {5, 5}, {1, 1}, {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                 {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */           false,
                /* expectedCollectionFromNone= */       {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {8, 8}, {9, 9} },
                /* expectedResultFromAll= */            true,
                /* expectedCollectionFromAll= */        {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8} },
                /* expectedResultFromAllAndMore= */     true,
                /* expectedCollectionFromAllAndMore= */ {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8} }
        );

        allOk = allOk && collectionTestGroupItemRemoveOf < std :: initializer_list < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                                 this,
                /* groupVariant= */                             "InitializerList",
                /* subvariant= */                               "removeNotOf",
                /* subvariantOffset= */                         7,
                /* iterableUnderTest= */                        underTest,
                /* removePfnVariant= */                         & cds :: Collection < MapEntry < int, int > > :: removeNotOf,
                /* limit= */                                    3U,
                /* noneCommon= */                               {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                                {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreLessThanLimitCommon= */                  {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {1235, 1235}, {9534, 9534}},
                /* moreCommon= */                               {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* moreMoreThanLimitCommon= */                  {{2, 2}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                                {{9, 9}, {2, 2}, {5, 5}, {1, 1} , {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                         {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */                   3U,
                /* expectedCollectionFromNone= */               {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromOne= */                    3U,
                /* expectedCollectionFromOne= */                {{4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromMoreLessThanLimit= */      3U,
                /* expectedCollectionFromMoreLessThanLimit= */  {{3, 3}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromMore= */                   3U,
                /* expectedCollectionFromMore= */               {{3, 3}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromMoreMoreThanLimit= */      3U,
                /* expectedCollectionFromMoreMoreThanLimit= */  {{2, 2}, {3, 3}, {5, 5}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromAll= */                    0U,
                /* expectedCollectionFromAll= */                {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromAllAndMore= */             0U,
                /* expectedCollectionFromAllAndMore= */         {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} }
        );

        allOk = allOk && collectionTestGroupItemRemoveAllOf < std :: initializer_list < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeAllNotOf",
                /* subvariantOffset= */                 5,
                /* iterableUnderTest= */                underTest,
                /* removeAllPfnVariant= */              & cds :: Collection < MapEntry < int, int > > :: removeAllNotOf,
                /* noneCommon= */                       {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                        {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreCommon= */                       {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                        {{9, 9}, {2, 2}, {5, 5}, {1, 1}, {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                 {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */           9U,
                /* expectedCollectionFromNone= */       {},
                /* expectedResultFromOne= */            8U,
                /* expectedCollectionFromOne= */        {{6, 6} },
                /* expectedResultFromMore= */           6U,
                /* expectedCollectionFromMore= */       {{3, 3}, {5, 5}, {7, 7} },
                /* expectedResultFromAll= */            0U,
                /* expectedCollectionFromAll= */        {{1, 1} ,{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} },
                /* expectedResultFromAllAndMore= */     0U,
                /* expectedCollectionFromAllAndMore= */ {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9} }
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeFirstNotOf",
                /* subvariantOffset= */                 10,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < MapEntry < int, int > > :: removeFirstNotOf,
                /* noneCommon= */                       {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                        {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreCommon= */                       {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                        {{9, 9}, {2, 2}, {5, 5}, {1, 1}, {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                 {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {{2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}}
        );

        allOk = allOk && collectionTestGroupItemRemoveFirstLastOf < std :: initializer_list < MapEntry < int, int > >, decltype (underTest), MapEntry < int, int > > (
                /* pTestLib= */                         this,
                /* groupVariant= */                     "InitializerList",
                /* subvariant= */                       "removeLastNotOf",
                /* subvariantOffset= */                 15,
                /* iterableUnderTest= */                underTest,
                /* removeFirstLastPfnVariant= */        & cds :: Collection < MapEntry < int, int > > :: removeLastNotOf,
                /* noneCommon= */                       {{10, 10}, {11, 11}, {12, 12}, {13, 13}},
                /* oneCommon= */                        {{16, 16}, {6, 6}, {11, 11}, {12, 12}, {13, 13}},
                /* moreCommon= */                       {{20, 20}, {123, 123}, {5, 5}, {1230, 1230}, {435, 435}, {3, 3}, {7, 7}, {1235, 1235}, {9534, 9534}, {1245, 1245}},
                /* allCommon= */                        {{9, 9}, {2, 2}, {5, 5}, {1, 1}, {4, 4}, {3, 3}, {7, 7}, {8, 8}, {6, 6} },
                /* allAndMoreCommon= */                 {{91245, 91245}, {9, 9}, {2, 2}, {5532, 5532}, {5, 5}, {1, 1}, {4, 4}, {647, 647}, {1324, 1324}, {3, 3}, {7, 7}, {45, 45}, {234, 234}, {2365, 2365}, {2436, 2436}, {56, 56}, {8, 8}, {6, 6} },
                /* expectedResultFromNone= */           true,
                /* expectedCollectionFromNone= */       {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8} },
                /* expectedResultFromOne= */            true,
                /* expectedCollectionFromOne= */        {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}},
                /* expectedResultFromMore= */           true,
                /* expectedCollectionFromMore= */       {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}},
                /* expectedResultFromAll= */            false,
                /* expectedCollectionFromAll= */        {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}},
                /* expectedResultFromAllAndMore= */     false,
                /* expectedCollectionFromAllAndMore= */ {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}}
        );
    });

    return allOk;
}
